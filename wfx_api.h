/*
* Silicon Laboratories Confidential
* Copyright 2008-2013 Silicon Laboratories, Inc.
*
* THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT!
*/

#ifndef _WFX_API_H_
#define _WFX_API_H_

#define HI_API_VER							0x0400
#define WSM_HI_API_VER						(HI_API_VER|0x0024)
#define HI_MSG_ID_MASK	      				0x00FF
#define HI_MSG_SEQ_RANGE	    			0x0007

#define HI_MSG_TYPE_MASK					0x80
#define HI_UL_MAC_MASK						0x40
/* Message bases */
#define HI_REQ_BASE		 					0x00
#define HI_CNF_BASE		 					0x00
#define HI_IND_BASE		 					HI_MSG_TYPE_MASK

#define MAX_NUMBER_PACKET_FILTERS			0xA
#define WSM_MAX_NUM_INTERFACE				0x3
#define WSM_MAX_FILTER_ELEMENTS				0x4
#define WSM_MAX_GRP_ADDRTABLE_ENTRIES		0x8
#define WSM_MIB_NUM_TX_RATE_RETRY_POLICIES	0x20

typedef __le16 __les16;
typedef __le32 __les32;

#ifndef HI_GENERIC_API

#define HI_CONTROL_GPIO_REQ_ID                          0x26
#define HI_CONTROL_GPIO_CNF_ID                          0x26
#define HI_SHUT_DOWN_REQ_ID                             0x32
#define HI_SHUT_DOWN_CNF_ID                             0x32
#define HI_EXCEPTION_IND_ID                             0xe0
#define HI_ERROR_IND_ID                                 0xe4
#define HI_STARTUP_IND_ID                               0xe1
#define HI_GENERIC_IND_ID                               0xe3
#define HI_CONFIGURATION_REQ_ID                         0x09
#define HI_CONFIGURATION_CNF_ID                         0x09
#define HI_SET_SL_MAC_KEY_REQ_ID                        0x27
#define HI_SET_SL_MAC_KEY_CNF_ID                        0x27
#define HI_SL_EXCHANGE_PUB_KEYS_REQ_ID                  0x28
#define HI_SL_EXCHANGE_PUB_KEYS_CNF_ID                  0x28
#define HI_SL_CONFIGURE_REQ_ID                          0x29
#define HI_SL_CONFIGURE_CNF_ID                          0x29

/**************************************************/

#define API_FILENAME_SIZE                               48        
#define API_DATA_SIZE_124                               124       
#define API_OPN_SIZE                                    14        
#define API_UID_SIZE                                    8         
#define API_MAC_ADDR0_SIZE                              6         
#define API_MAC_ADDR1_SIZE                              6         
#define API_DISABLED_CHANNEL_LIST_SIZE                  2         
#define API_RESERVED2_SIZE                              6         
#define API_FIRMWARE_LABEL_SIZE                         128       
#define API_PDS_DATA_SIZE                               1         
#define API_KEY_VALUE_SIZE                              32        
#define API_HOST_PUB_KEY_SIZE                           32        
#define API_HOST_PUB_KEY_MAC_SIZE                       64        
#define API_NCP_PUB_KEY_SIZE                            32        
#define API_NCP_PUB_KEY_MAC_SIZE                        64        
#define API_ENCR_BMP_SIZE                               32        
#define API_NCP_ENCR_BMP_SIZE                           32        
#define API_NB_RX_BY_RATE_SIZE                          22        
#define API_PER_SIZE                                    22        
#define API_SNR_SIZE                                    22        
#define API_RSSI_SIZE                                   22        
#define API_CFO_SIZE                                    22        
#define API_RAWDATA_SIZE                                1         

/**************************************************/

typedef enum hi_generic_indication_id_e {
        HI_GENERIC_INDICATION_ID_RAW               = 0x0,         /*Byte stream type*/
        HI_GENERIC_INDICATION_ID_STRING            = 0x1,         /*String*/        
        HI_GENERIC_INDICATION_ID_RX_STATS          = 0x2          /*Rx statistics structure*/
} HiGenericIndicationId_t;

typedef enum hi_fw_type_e {
        HI_FW_TYPE_ETF                             = 0x0,         /*ETF Firmware*/  
        HI_FW_TYPE_WFM                             = 0x1,         /*WLAN Full MAC (WFM)*/
        HI_FW_TYPE_WSM                             = 0x2,         /*WLAN Split MAC (WSM)*/
        HI_FW_TYPE_HI_TEST                         = 0x3,         /*HI Test Firmware*/
        HI_FW_TYPE_PLATFORM_TEST                   = 0x4          /*Platform Test Firmware */
} HiFwType_t;

typedef enum hi_gen_req_e {
        HI_GEN_REQ_TRACE_CONTROL_REQ_ID            = 0x0,
        HI_GEN_REQ_HI_LOOPBACK_TEST_REQ_ID         = 0x1
} HiGenReq_t;

typedef enum hi_gpio_error_e {
        HI_GPIO_ERROR_0                            = 0x0,         /*Undefined GPIO_ID*/
        HI_GPIO_ERROR_1                            = 0x1,         /*GPIO_ID not configured in gpio mode (gpio_enabled =0)*/
        HI_GPIO_ERROR_2                            = 0x2          /*Toggle not possible while in tristate*/
} HiGpioError_t;

typedef enum hi_gpio_mode_e {
        HI_GPIO_MODE_D0                            = 0x0,         /*drive 0*/       
        HI_GPIO_MODE_D1                            = 0x1,         /*drive 1*/       
        HI_GPIO_MODE_OD0                           = 0x2,         /*open drain 0*/  
        HI_GPIO_MODE_OD1                           = 0x3,         /*open drain 1*/  
        HI_GPIO_MODE_TRISTATE                      = 0x4,         /*Tristate*/      
        HI_GPIO_MODE_TOGGLE                        = 0x5,         /*Toggle*/        
        HI_GPIO_MODE_READ                          = 0x6          /*Read*/          
} HiGpioMode_t;

typedef enum hi_gpio_status_e {
        HI_GPIO_STATUS_OK                          = 0x0,         /*command is OK*/ 
        HI_GPIO_STATUS_WARN                        = 0x1,         /*Warning*/       
        HI_GPIO_STATUS_ERR                         = 0x2          /*Error*/         
} HiGpioStatus_t;

typedef enum sl_configure_ind_status_e {
        SL_CONFIGURE_IND_STATUS_PUB_KEY_RDY        = 0x2d         /*Force invalidating session key */
} SlConfigureIndStatus_t;

typedef enum sl_configure_skey_invld_e {
        SL_CONFIGURE_SKEY_INVLD_INVALIDATE         = 0x87         /*Force invalidating session key */
} SlConfigureSkeyInvld_t;

typedef enum sl_mac_key_dest_e {
        SL_MAC_KEY_DEST_OTP                        = 0x78,        /*Key will be stored in OTP*/
        SL_MAC_KEY_DEST_RAM                        = 0x87         /*Key will be stored in RAM*/
} SlMacKeyDest_t;

typedef enum sl_mac_key_status_e {
        SL_MAC_KEY_STATUS_SUCCESS                  = 0x5a,        /*Key has been correctly written*/
        SL_MAC_KEY_STATUS_FAILED_KEY_ALREADY_BURNED = 0x1,        /*Key already exists in OTP*/
        SL_MAC_KEY_STATUS_FAILED_RAM_MODE_NOT_ALLOWED = 0x2,      /*RAM mode is not allowed*/
        SL_MAC_KEY_STATUS_FAILED_UNKNOWN_MODE      = 0x3          /*Unknown mode (should be RAM or OTP)*/
} SlMacKeyStatus_t;

typedef enum sl_pub_key_exchange_status_e {
        SL_PUB_KEY_EXCHANGE_STATUS_SUCCESS         = 0x78,        /*Host Public Key authenticated*/
        SL_PUB_KEY_EXCHANGE_STATUS_FAILED          = 0x1          /*Host Public Key authentication failed*/
} SlPubKeyExchangeStatus_t;

/**************************************************/

typedef struct __attribute__((__packed__)) hi_capabilities_s {
        u8       LinkMode : 2;                     /*Bit 0-1 : reg OTPCTRL_FB_STATUS_fb_secure_link_mode type: wsm_hi_error*/
        u8       Reserved : 6;                     /*Bit 2-7 : Reserved type: hi_gpio_error*/
        u8       Reserved2;                        /*Bit 8-15 : Reserved*/
        u8       Reserved3;                        /*Bit 16-23 : Reserved*/
        u8       Reserved4;                        /*Bit 24-31 : Reserved*/
} HiCapabilities_t;

typedef struct __attribute__((__packed__)) hi_rx_stats_s {
        __le32   NbRxFrame;                        /*Total number of frame received*/
        __le32   NbCrcFrame;                       /*Number of frame received with bad CRC*/
        __le32   PerTotal;                         /*PER on the total number of frame*/
        __le32   Throughput;                       /*Throughput calculated on correct frames received*/
        __le32   NbRxByRate[API_NB_RX_BY_RATE_SIZE];   /*Number of frame received by rate*/
        __le16   Per[API_PER_SIZE];                /*PER*10000 by frame rate*/
        __les16  Snr[API_SNR_SIZE];                /*SNR in Db*100 by frame rate*/
        __les16  Rssi[API_RSSI_SIZE];              /*RSSI in Dbm*100 by frame rate*/
        __les16  Cfo[API_CFO_SIZE];                /*CFO in kHz by frame rate*/
        __le32   Date;                             /*This message transmission date in firmware database (microsecond)*/
        __le32   PwrClkFreq;                       /*Frequency of the power clock in Hz*/
        u8       IsExtPwrClk;                      /*Indicate if the power clock is external*/
} HiRxStats_t;

/**************************************************/

typedef union hi_indication_data_u {
        HiRxStats_t                                   RxStats;                        /* Element :0*/   
        u8                                            RawData[API_RAWDATA_SIZE];      /* Element :1*/   
} HiIndicationData_t;

/**************************************************/

#endif /*HI_GENERIC_API*/

#define WSM_HI_RESET_REQ_ID                             0x0a
#define WSM_HI_RESET_CNF_ID                             0x0a
#define WSM_HI_READ_MIB_REQ_ID                          0x05
#define WSM_HI_READ_MIB_CNF_ID                          0x05
#define WSM_HI_WRITE_MIB_REQ_ID                         0x06
#define WSM_HI_WRITE_MIB_CNF_ID                         0x06
#define WSM_HI_START_SCAN_REQ_ID                        0x07
#define WSM_HI_START_SCAN_CNF_ID                        0x07
#define WSM_HI_STOP_SCAN_REQ_ID                         0x08
#define WSM_HI_STOP_SCAN_CNF_ID                         0x08
#define WSM_HI_SCAN_CMPL_IND_ID                         0x86
#define WSM_HI_TX_REQ_ID                                0x04
#define WSM_HI_TX_CNF_ID                                0x04
#define WSM_HI_RX_IND_ID                                0x84
#define WSM_HI_EVENT_IND_ID                             0x85
#define WSM_HI_JOIN_REQ_ID                              0x0b
#define WSM_HI_JOIN_CNF_ID                              0x0b
#define WSM_HI_JOIN_COMPLETE_IND_ID                     0x8f
#define WSM_HI_SET_PM_MODE_REQ_ID                       0x10
#define WSM_HI_SET_PM_MODE_CNF_ID                       0x10
#define WSM_HI_SET_PM_MODE_CMPL_IND_ID                  0x89
#define WSM_HI_SET_BSS_PARAMS_REQ_ID                    0x11
#define WSM_HI_SET_BSS_PARAMS_CNF_ID                    0x11
#define WSM_HI_ADD_KEY_REQ_ID                           0x0c
#define WSM_HI_ADD_KEY_CNF_ID                           0x0c
#define WSM_HI_REMOVE_KEY_REQ_ID                        0x0d
#define WSM_HI_REMOVE_KEY_CNF_ID                        0x0d
#define WSM_HI_TX_QUEUE_PARAMS_REQ_ID                   0x12
#define WSM_HI_TX_QUEUE_PARAMS_CNF_ID                   0x12
#define WSM_HI_EDCA_PARAMS_REQ_ID                       0x13
#define WSM_HI_EDCA_PARAMS_CNF_ID                       0x13
#define WSM_HI_SWITCH_CHANNEL_REQ_ID                    0x16
#define WSM_HI_SWITCH_CHANNEL_CNF_ID                    0x16
#define WSM_HI_SWITCH_CHANNEL_IND_ID                    0x8a
#define WSM_HI_START_REQ_ID                             0x17
#define WSM_HI_START_CNF_ID                             0x17
#define WSM_HI_BEACON_TRANSMIT_REQ_ID                   0x18
#define WSM_HI_BEACON_TRANSMIT_CNF_ID                   0x18
#define WSM_HI_SUSPEND_RESUME_TX_IND_ID                 0x8c
#define WSM_HI_UPDATE_IE_REQ_ID                         0x1b
#define WSM_HI_UPDATE_IE_CNF_ID                         0x1b
#define WSM_HI_MAP_LINK_REQ_ID                          0x1c
#define WSM_HI_MAP_LINK_CNF_ID                          0x1c
#define WSM_HI_MULTI_TRANSMIT_REQ_ID                    0x1e
#define WSM_HI_MULTI_TRANSMIT_CNF_ID                    0x1e
#define WSM_HI_DEBUG_IND_ID                             0x8e
#define WSM_HI_BA_TIMEOUT_IND_ID                        0x88

/**************************************************/

#define WSM_API_SSID_DEF_SIZE                           2         
#define WSM_API_CHANNEL_LIST_SIZE                       14        
#define WSM_API_TIMESTAMP_SIZE                          8         
#define WSM_API_RESERVED2_SIZE                          3         
#define WSM_API_BSSID_SIZE                              6         
#define WSM_API_SSID_SIZE                               32        
#define WSM_API_RESERVED_SIZE_3                         3         
#define WSM_API_CW_MIN_SIZE                             4         
#define WSM_API_CW_MAX_SIZE                             4         
#define WSM_API_AIFSN_SIZE                              4         
#define WSM_API_TX_OP_LIMIT_SIZE                        4         
#define WSM_API_MAX_RECEIVE_LIFETIME_SIZE               4         
#define WSM_API_TX_RESUME_FLAGS_PER_IF_SIZE             3         
#define WSM_API_MAC_ADDR_SIZE                           6         
#define WSM_API_TRANSMIT_ADDRESS_SIZE                   6         
#define WSM_API_PEER_ADDRESS_SIZE                       6         
#define WSM_API_KEY_DATA_SIZE                           16        
#define WSM_API_RESERVED_SIZE_2                         2         
#define WSM_API_TKIP_KEY_DATA_SIZE                      16        
#define WSM_API_RX_MIC_KEY_SIZE                         8         
#define WSM_API_TX_MIC_KEY_SIZE                         8         
#define WSM_API_RX_SEQUENCE_COUNTER_SIZE                8         
#define WSM_API_AES_KEY_DATA_SIZE                       16        
#define WSM_API_WAPI_KEY_DATA_SIZE                      16        
#define WSM_API_MIC_KEY_DATA_SIZE                       16        
#define WSM_API_IGTK_KEY_DATA_SIZE                      16        
#define WSM_API_IPN_SIZE                                8         
#define WSM_API_PEER_MAC_ADDRESS_SIZE                   6         
#define WSM_API_RESERVED_SIZE_4                         4         
#define WSM_API_STATISTICS_GROUP_DATA_SIZE              52        
#define WSM_API_OUI12_SIZE                              2         
#define WSM_API_OUI34_SIZE                              2         
#define WSM_API_OUI_SIZE                                3         
#define WSM_API_MATCH_DATA_SIZE                         3         
#define WSM_API_ADDRESS_SIZE                            6         
#define WSM_API_ADDRESS_SIZE_4                          4         
#define WSM_API_ADDRESS_SIZE_16                         16        
#define WSM_API_RESERVED_SIZE_6                         6         
#define WSM_API_MASK_VALUE_SIZE                         2         
#define WSM_API_RESULT_VALUE_SIZE                       2         
#define WSM_API_MAC_ADDR0_SIZE                          6         
#define WSM_API_MAC_ADDR1_SIZE                          6         
#define WSM_API_ADDRESS_LIST_SIZE                       8         
#define WSM_API_IPV4_ADDRESS_SIZE                       4         
#define WSM_API_FRAME_SIZE                              1024      
#define WSM_API_IE_TABLE_SIZE                           4         
#define WSM_API_ETHER_TYPE_FILTER_SIZE                  4         
#define WSM_API_UDP_PORTS_FILTER_SIZE                   4         
#define WSM_API_MAGIC_PATTERN_SIZE                      32        
#define WSM_API_SENDER_IPV4_ADDRESS_SIZE                4         
#define WSM_API_TARGET_IPV4_ADDRESS_SIZE                4         
#define WSM_API_MAC_ADDRESS_FILTER_SIZE                 8         
#define WSM_API_I_PV4_ADDRESS_FILTER_SIZE               8         
#define WSM_API_I_PV6_ADDRESS_FILTER_SIZE               4         
#define WSM_API_IPV6_ADDRESS_SIZE                       16        
#define WSM_API_ASVALUE_SIZE                            4         
#define WSM_API_RAWDATA_SIZE                            1         

/**************************************************/

typedef enum filter_enable_type_e {
        FILTER_ENABLE_TYPE_DISABLE                 = 0x0,         /*filter with nbr == FilterID is disabled*/
        FILTER_ENABLE_TYPE_COALESCING              = 0x1,         /*filter with nbr == FilterID is enabled and is used as a Packet Coalescing filter*/
        FILTER_ENABLE_TYPE_WAKEONLAN               = 0x2,         /*filter with nbr == FilterID is enabled and is used as a WakeOnLan trigger (filter process stops)*/
        FILTER_ENABLE_TYPE_DISCARD                 = 0x3,         /*filter with nbr == FilterID is enabled and is used as a discard trigger*/
        FILTER_ENABLE_TYPE_ACCEPT                  = 0x4          /*filter with nbr == FilterID is enabled and is used as a accept trigger, filter process continues.*/
} FilterEnableType_t;

typedef enum filter_condition_mib_e {
        FILTER_CONDITION_MIB_GROUP                 = 0x1,         /*Group Address Filtering*/
        FILTER_CONDITION_MIB_MAGIC                 = 0x2,         /*Magic Number Filter*/
        FILTER_CONDITION_MIB_ETHERNET              = 0x3,         /*Ethernet Type Filter*/
        FILTER_CONDITION_MIB_UDP                   = 0x4,         /*UDP Filter*/    
        FILTER_CONDITION_MIB_ARP                   = 0x5,         /*ARP Filter*/    
        FILTER_CONDITION_MIB_MAC_ADDRESS           = 0x6,         /*MAC Address Filtering*/
        FILTER_CONDITION_MIB_IPV4_ADDRESS          = 0x7,         /*IPv4 Address Filtering*/
        FILTER_CONDITION_MIB_IPV6_ADDRESS          = 0x8,         /*IPv6 Address Filtering*/
        FILTER_CONDITION_MIB_NS                    = 0x9
} FilterConditionMib_t;

typedef enum filter_header_offset_type_e {
        FILTER_HEADER_OFFSET_TYPE_MASK             = 0xc000,      /*MASK*/          
        FILTER_HEADER_OFFSET_TYPE_MAC              = 0x0,         /*MAC*/           
        FILTER_HEADER_OFFSET_TYPE_LLC              = 0x8000,      /*LLC*/           
        FILTER_HEADER_OFFSET_TYPE_PROTOCOL         = 0x4000       /*PROTOCOL*/      
} FilterHeaderOffsetType_t;

typedef enum filter_id_e {
        FILTER_ID_DISABLE_ALL                      = 0x40,        /*DISABLE_ALL*/   
        FILTER_ID_ENABLE_ALL                       = 0x41,        /*ENABLE_ALL*/    
        FILTER_ID_SET_TO_DEFAULT                   = 0x42,        /*SET_TO_DEFAULT*/
        FILTER_ID_DELETE_DEFAULT                   = 0x43         /*DELETE_DEFAULT*/
} FilterId_t;

typedef enum filter_operation_e {
        FILTER_OPERATION_EQUAL                     = 0x0,         /*EQUAL*/         
        FILTER_OPERATION_MASKED                    = 0x1,         /*MASKED*/        
        FILTER_OPERATION_NOT_EQUAL                 = 0x2          /*NOT_EQUAL*/     
} FilterOperation_t;

typedef enum filter_packet_type_e {
        FILTER_PACKET_TYPE_UNICAST                 = 0x1,         /*unicast*/       
        FILTER_PACKET_TYPE_MULTICAST               = 0x2,         /*multicast*/     
        FILTER_PACKET_TYPE_BROADCAST               = 0x3,         /*broadcast*/     
        FILTER_PACKET_TYPE_ALL_VALID               = 0x4          /*All Valid Data Packets*/
} FilterPacketType_t;

typedef enum wsm_e {
        WSM_STATUS_SUCCESS                         = 0x0,         /*The firmware has successfully completed a request.*/
        WSM_STATUS_FAILURE                         = 0x1,         /*This is a generic failure code if other error codes do not apply.*/
        WSM_INVALID_PARAMETER                      = 0x2,         /*A request contains one or more invalid parameters.*/
        WSM_ACCESS_DENIED                          = 0x3,         /*The request cannot be performed because the device is in an inappropriate mode.*/
        WSM_STATUS_DECRYPTFAILURE                  = 0x4,         /*The frame received includes a decryption error.*/
        WSM_STATUS_MICFAILURE                      = 0x5,         /*A MIC failure was detected in the received packet.*/
        WSM_STATUS_RETRY_EXCEEDED                  = 0x6,         /*The transmit request failed because the retry limit was exceeded.*/
        WSM_STATUS_TX_LIFETIME_EXCEEDED            = 0x7,         /*The transmit request failed because the MSDU life time was exceeded.*/
        WSM_STATUS_LINK_LOST                       = 0x8,         /*The link to the AP is lost.*/
        WSM_STATUS_NO_KEY_FOUND                    = 0x9,         /*No key was found for the encrypted frame.*/
        WSM_STATUS_JAMMER_DETECTED                 = 0xa,         /*Jammer was detected when transmitting this frame.*/
        WSM_REQUEUE                                = 0xb,         /*The message should be re-queued later. This is applicable only to transmit.*/
        WSM_STATUS_UNENCRYPTEDFAILURE              = 0xc,
        WSM_STATUS_REFUSED                         = 0xd
} Wsm_t;

typedef enum wsm_ackplcy_e {
        WSM_ACKPLCY_NORMAL                         = 0x0,         /*Normal*/        
        WSM_ACKPLCY_TXNOACK                        = 0x1,         /*Tx no ACK*/     
        WSM_ACKPLCY_BLCKACK                        = 0x2          /*Block ACK*/     
} WsmAckplcy_t;

typedef enum wsm_channel_width_e {
        WSM_CHANNEL_WIDTH_20_MHZ                   = 0x0,         /*20 MHz channel width*/
        WSM_CHANNEL_WIDTH_40_MHZ                   = 0x1          /*40 MHz channel width*/
} WsmChannelWidth_t;

typedef enum wsm_debug_ind_e {
        WSM_DEBUG_IND_EPTA_RT_STATS                = 0x0,         /*EPTA RT Stats*/ 
        WSM_DEBUG_IND_EPTA_NRT_STATS               = 0x1,         /*EPTA NRT Stats*/
        WSM_DEBUG_IND_EPTA_DBG_INFO                = 0x2,         /*EPTA Debug info*/
        WSM_DEBUG_IND_PS_DBG_INFO                  = 0x3,         /*PS Debug info*/ 
        WSM_DEBUG_IND_PAS_DBG_INFO                 = 0x4,         /*PAS Debug info*/
        WSM_DEBUG_IND_TEMP                         = 0x5,         /*not used*/      
        WSM_DEBUG_IND_CPU_PROFILING                = 0x6,         /*CPU Profiling*/ 
        WSM_DEBUG_IND_RAW                          = 0x7          /*Raw Buffering*/ 
} WsmDebugInd_t;

typedef enum wsm_enable_e {
        WSM_ENABLE_DISABLE                         = 0x0,         /*Filtering disabled*/
        WSM_ENABLE_ENABLE                          = 0x1,         /*Filtering enabled*/
        WSM_ENABLE_MULTI                           = 0x2          /*Filter out all Multicast addresses*/
} WsmEnable_t;

typedef enum wsm_event_ind_e {
        WSM_EVENT_IND_ERROR                        = 0x0,         /*Error*/         
        WSM_EVENT_IND_BSSLOST                      = 0x1,         /*BSS lost*/      
        WSM_EVENT_IND_BSSREGAINED                  = 0x2,         /*BSS regained*/  
        WSM_EVENT_IND_RADAR                        = 0x3,         /*Radar detected*/
        WSM_EVENT_IND_RCPI_RSSI                    = 0x4,         /*RCPI or RSSI threshold triggered*/
        WSM_EVENT_IND_BT_INACTIVE                  = 0x5,         /*Bluetooth inactive*/
        WSM_EVENT_IND_BT_ACTIVE                    = 0x6,         /*Bluetooth active*/
        WSM_EVENT_IND_PS_MODE_ERROR                = 0x7,         /*PS-Mode error, indicating that the WLAN device had detected problems in the Power Save mode operation of the AP*/
        WSM_EVENT_IND_PAS_EVENT                    = 0x8,         /*PAS related (i.e. event related to processing received frames or frames to be transmitted)*/
        WSM_EVENT_IND_INACTIVITY                   = 0x9          /*Inactive*/      
} WsmEventInd_t;

typedef enum wsm_frame_format_e {
        WSM_FRAME_FORMAT_NON_HT                    = 0x0,         /*Format non-HT*/ 
        WSM_FRAME_FORMAT_MIXED_FORMAT_HT           = 0x1,         /*Mixed format*/  
        WSM_FRAME_FORMAT_GF_HT_11N                 = 0x2          /*Greenfield format*/
} WsmFrameFormat_t;

typedef enum wsm_key_type_e {
        WSM_KEY_TYPE_WEP_DEFAULT                   = 0x0,         /*WEP default (group) key*/
        WSM_KEY_TYPE_WEP_PAIRWISE                  = 0x1,         /*WEP pairwise key*/
        WSM_KEY_TYPE_TKIP_GROUP                    = 0x2,         /*TKIP group key*/
        WSM_KEY_TYPE_TKIP_PAIRWISE                 = 0x3,         /*TKIP pairwise key*/
        WSM_KEY_TYPE_AES_GROUP                     = 0x4,         /*AES group key*/ 
        WSM_KEY_TYPE_AES_PAIRWISE                  = 0x5,         /*AES pairwise key*/
        WSM_KEY_TYPE_WAPI_GROUP                    = 0x6,         /*WAPI group key*/
        WSM_KEY_TYPE_WAPI_PAIRWISE                 = 0x7,         /*WAPI pairwise key*/
        WSM_KEY_TYPE_IGTK_GROUP                    = 0x8,         /*IGTK group key*/
        WSM_KEY_TYPE_NONE                          = 0x9          /*No key*/        
} WsmKeyType_t;

typedef enum wsm_measure_type_e {
        WSM_MEASURE_TYPE_CHANNEL_LOAD              = 0x0,         /*Channel load request*/
        WSM_MEASURE_TYPE_NOISE_HISTOGRAM           = 0x1,         /*Noise histogram request*/
        WSM_MEASURE_TYPE_BEACON                    = 0x2,         /*Beacon request*/
        WSM_MEASURE_TYPE_STA_STATS                 = 0x3,         /*STA statistics request*/
        WSM_MEASURE_TYPE_LINK_MEASUREMENT          = 0x4          /*Link measurement*/
} WsmMeasureType_t;

typedef enum wsm_mode_e {
        WSM_MODE_IBSS                              = 0x0,         /*IBSS*/          
        WSM_MODE_BSS                               = 0x1          /*BSS*/           
} WsmMode_t;

typedef enum wsm_pm_mode_e {
        WSM_PM_MODE_ACTIVE                         = 0x0,         /*802.11 active mode*/
        WSM_PM_MODE_PS                             = 0x1,         /*802.11 PS mode*/
        WSM_PM_MODE_UNDETERMINED                   = 0x2          /*Note: Undetermined status is reported when the NULL data frame used to advertise the PM mode to the AP at pre- or post-background scan is not acknowledged.*/
} WsmPmMode_t;

typedef enum wsm_preamble_e {
        WSM_PREAMBLE_LONG                          = 0x0,         /*for long preamble*/
        WSM_PREAMBLE_SHORT                         = 0x1,         /*for short preamble (Long for 1 Mbit/s)*/
        WSM_PREAMBLE_SHORT_LONG12                  = 0x2          /*for short preamble (Long for 1 Mbit/s and 2 Mbit/s)*/
} WsmPreamble_t;

typedef enum wsm_queue_id_e {
        WSM_QUEUE_ID_BESTEFFORT                    = 0x0,         /*Best effort or legacy*/
        WSM_QUEUE_ID_BACKGROUND                    = 0x1,         /*Background*/    
        WSM_QUEUE_ID_VIDEO                         = 0x2,         /*Video*/         
        WSM_QUEUE_ID_VOICE                         = 0x3          /*Voice*/         
} WsmQueueId_t;

typedef enum wsm_stbc_e {
        WSM_STBC_NOT_ALLOWED                       = 0x0,         /*STBC not allowed*/
        WSM_STBC_ALLOWED                           = 0x1          /*STBC allowed*/  
} WsmStbc_t;

typedef enum wsm_ba_mode_e {
        WSM_BA_MODE_REMOVE                         = 0x0,         /*REMOVE*/        
        WSM_BA_MODE_HTI                            = 0x1,         /*HTI*/           
        WSM_BA_MODE_COMPRESSED                     = 0x2          /*COMPRESSED*/    
} WsmBaMode_t;

typedef enum wsm_beacon_filter_e {
        WSM_BEACON_FILTER_DISABLE                  = 0x0,         /*Beacon filtering is disabled (default).*/
        WSM_BEACON_FILTER_ENABLE                   = 0x1,         /*Beacon filtering is enabled.*/
        WSM_BEACON_FILTER_AUTO_ERP                 = 0x2          /*Auto ERP filtering is enabled (bit 1 has to be 1as well).*/
} WsmBeaconFilter_t;

typedef enum wsm_bluetooth_quality_e {
        WSM_BLUETOOTH_QUALITY_EXCELLENT            = 0x0,         /*Excellent Bluetooth quality (most Bluetooth packets are granted, amount is defined in SDD by EXCELLENT_BT_QUAL_PCT)*/
        WSM_BLUETOOTH_QUALITY_GOOD                 = 0x1,         /*Good Bluetooth quality (many Bluetooth packets are granted, amount is defined in SDD by GOOD_BT_QUAL_PCT)*/
        WSM_BLUETOOTH_QUALITY_POOR                 = 0x2          /*Poor Bluetooth quality (Bluetooth packets granted when no WLAN activity, Bluetooth link maintenance is guaranteed)*/
} WsmBluetoothQuality_t;

typedef enum wsm_filter_mode_e {
        WSM_FILTER_MODE_DISABLED                   = 0x0,         /*Filter is disabled*/
        WSM_FILTER_MODE_OUT                        = 0x1,         /*Filter out matching frames*/
        WSM_FILTER_MODE_IN                         = 0x2          /*Filter in matching frames*/
} WsmFilterMode_t;

typedef enum wsm_hi_dbg_e {
        WSM_HI_DBG_UNDEF_INST                      = 0x0,         /*undefined*/     
        WSM_HI_DBG_PREFETCH_ABORT                  = 0x1,         /*prefetch abort*/
        WSM_HI_DBG_DATA_ABORT                      = 0x2,         /*data abort*/    
        WSM_HI_DBG_UNKNOWN_ERROR                   = 0x3,         /*unknown error*/ 
        WSM_HI_DBG_ASSERT                          = 0x4          /*assertion*/     
} WsmHiDbg_t;

typedef enum wsm_hi_sta_stat_e {
        WSM_HI_STA_STAT_COUNTERS_TABLE             = 0x0,         /*STA counters from dot11CountersTable*/
        WSM_HI_STA_STAT_MAC_STATS                  = 0x1,         /*STA counters from dot11MacStatistics group*/
        WSM_HI_STA_STAT_QOS_COUNTERS_0             = 0x2,         /*QoS STA counters for UP0 from dot11QosCountersTable*/
        WSM_HI_STA_STAT_QOS_COUNTERS_1             = 0x3,         /*QoS STA counters for UP1 from dot11QosCountersTable*/
        WSM_HI_STA_STAT_QOS_COUNTERS_2             = 0x4,         /*QoS STA counters for UP2 from dot11QosCountersTable*/
        WSM_HI_STA_STAT_QOS_COUNTERS_3             = 0x5,         /*QoS STA counters for UP3 from dot11QosCountersTable*/
        WSM_HI_STA_STAT_QOS_COUNTERS_4             = 0x6,         /*QoS STA counters for UP4 from dot11QosCountersTable*/
        WSM_HI_STA_STAT_QOS_COUNTERS_5             = 0x7,         /*QoS STA counters for UP5 from dot11QosCountersTable*/
        WSM_HI_STA_STAT_QOS_COUNTERS_6             = 0x8,         /*QoS STA counters for UP6 from dot11QosCountersTable*/
        WSM_HI_STA_STAT_QOS_COUNTERS_7             = 0x9,         /*QoS STA counters for UP7 from dot11QosCountersTable*/
        WSM_HI_STA_STAT_BSS_AVG_DELAY              = 0xa,         /*BSS average access delays*/
        WSM_HI_STA_STAT_COUNTERS_GRP3_AMSDU        = 0xb,         /*STA counters from dot11CountersGroup3 (A-MSDU)*/
        WSM_HI_STA_STAT_COUNTERS_GRP3_AMPDU        = 0xc,         /*STA counters from dot11CountersGroup3 (A-MPDU)*/
        WSM_HI_STA_STAT_COUNTERS_GRP3_BA_WIDTH_PSMP = 0xd,        /*STA counters from dot11CountersGroup3 (BlockAckReq, Channel Width, PSMP)*/
        WSM_HI_STA_STAT_COUNTERS_GRP3_RD_DCTS_TXOP = 0xe,         /*STA counters from dot11CountersGroup3 (RD, dual CTS, L-SIG TXOP protection)*/
        WSM_HI_STA_STAT_COUNTERS_GRP3_BEAM_STBC    = 0xf,         /*STA counters from dot11CountersGroup3 (beamforming and STBC)*/
        WSM_HI_STA_STAT_SECURITY_COUNTERS          = 0xc8         /*STA security counters*/
} WsmHiStaStat_t;

typedef enum wsm_hi_state_e {
        WSM_HI_STATE_CMPL                          = 0x0,         /*Channel switch completed.*/
        WSM_HI_STATE_CMPL_EARLY                    = 0x1,         /*Channel switch completed early (due to device action).*/
        WSM_HI_STATE_ABORTED                       = 0x2,         /*Channel switch aborted (due to host action)*/
        WSM_HI_STATE_NEW_CHANN                     = 0x3          /*New channel is switched in.*/
} WsmHiState_t;

typedef enum wsm_ipi_level_e {
        WSM_IPI_LEVEL__92                          = 0x0,         /*IPI <= -92*/    
        WSM_IPI_LEVEL_92_89                        = 0x1,         /*-92 <= IPI <= -89*/
        WSM_IPI_LEVEL_89_86                        = 0x2,         /*-89 <= IPI <= -86*/
        WSM_IPI_LEVEL_86_83                        = 0x3,         /*-86 <= IPI <= -83*/
        WSM_IPI_LEVEL_83_80                        = 0x4,         /*-83 <= IPI <= -80*/
        WSM_IPI_LEVEL_80_75                        = 0x5,         /*-80 <= IPI <= -75*/
        WSM_IPI_LEVEL_75_70                        = 0x6,         /*-75 <= IPI <= -70*/
        WSM_IPI_LEVEL_70_65                        = 0x7,         /*-70 <= IPI <= -65*/
        WSM_IPI_LEVEL_65_60                        = 0x8,         /*-65 <= IPI <= -60*/
        WSM_IPI_LEVEL_60_55                        = 0x9,         /*-60 <= IPI <= -55*/
        WSM_IPI_LEVEL_55_                          = 0xa          /*-55 <= IPI*/    
} WsmIpiLevel_t;

typedef enum wsm_mib_id_e {
        WSM_MIB_ID_DOT11_MAC_ADDRESSES             = 0x0,         /*4.1  dot11MacAdresses*/
        WSM_MIB_ID_DOT11_MAX_TRANSMIT_LIFETIME     = 0x1,         /*4.2  dot11MaxtransmitMsduLifeTime*/
        WSM_MIB_ID_DOT11_MAX_RECEIVE_LIFETIME      = 0x2,         /*4.3  dot11MaxReceiveLifeTime*/
        WSM_MIB_ID_DOT11_SLOT_TIME                 = 0x3,         /*4.4  dot11SlotTime*/
        WSM_MIB_ID_DOT11_GROUP_ADDRESSES_TABLE     = 0x4,         /*4.5  dot11GroupAddressesTable*/
        WSM_MIB_ID_DOT11_WEP_DEFAULT_KEY_ID        = 0x5,         /*4.6  dot11WepDefaultKeyId*/
        WSM_MIB_ID_DOT11_CURRENT_TX_POWER_LEVEL    = 0x6,         /*4.7  dot11CurrentTxPowerLevel*/
        WSM_MIB_ID_DOT11_RTS_THRESHOLD             = 0x7,         /*4.8  dot11RTSThreshold*/
        WSM_MIB_ID_NON_ERP_PROTECTION              = 0x1000,      /*4.9  NonErpProtection*/
        WSM_MIB_ID_ARP_IP_ADDRESSES_TABLE          = 0x1001,      /*4.10 ArpIpAddressesTable*/
        WSM_MIB_ID_TEMPLATE_FRAME                  = 0x1002,      /*4.11 TemplateFrame*/
        WSM_MIB_ID_RX_FILTER                       = 0x1003,      /*4.12 RxFilter*/ 
        WSM_MIB_ID_BEACON_FILTER_TABLE             = 0x1004,      /*4.13 BeaconFilterTable*/
        WSM_MIB_ID_BEACON_FILTER_ENABLE            = 0x1005,      /*4.14 BeaconFilterEnable*/
        WSM_MIB_ID_OPERATIONAL_POWER_MODE          = 0x1006,      /*4.15 OperationalPowerMode*/
        WSM_MIB_ID_BEACON_WAKEUP_PERIOD            = 0x1007,      /*4.16 BeaconWakeUpPeriod*/
        WSM_MIB_ID_RCPI_RSSI_THRESHOLD             = 0x1009,      /*4.17 RcpiRssiThreshold*/
        WSM_MIB_ID_STATISTICS_TABLE                = 0x100a,      /*4.18 StatisticsTable*/
        WSM_MIB_ID_IBSS_PS_CONFIG                  = 0x100b,      /*4.19 IbssPsConfig*/
        WSM_MIB_ID_COUNTERS_TABLE                  = 0x100c,      /*4.20 CountersTable*/
        WSM_MIB_ID_BLOCK_ACK_INFO                  = 0x100d,      /*Test Purposes Only*/
        WSM_MIB_ID_BLOCK_ACK_POLICY                = 0x100e,      /*4.21 BlockAckPolicy*/
        WSM_MIB_ID_OVERRIDE_INTERNAL_TX_RATE       = 0x100f,      /*4.22 OverrideInternalTxRate*/
        WSM_MIB_ID_SET_ASSOCIATION_MODE            = 0x1010,      /*4.23 SetAssociationMode*/
        WSM_MIB_ID_UPDATE_EPTA_CONFIG_DATA         = 0x1011,      /*4.24 UpdateEptaConfigData*/
        WSM_MIB_ID_SELECT_CCA_METHOD               = 0x1012,      /*4.25 SelectCcaMethod*/
        WSM_MIB_ID_SET_UAPSD_INFORMATION           = 0x1013,      /*4.26 SetUpasdInformation*/
        WSM_MIB_ID_SET_AUTO_CALIBRATION_MODE       = 0x1015,      /*4.27 SetAutoCalibrationMode  WBF00004073*/
        WSM_MIB_ID_SET_TX_RATE_RETRY_POLICY        = 0x1016,      /*4.28 SetTxRateRetryPolicy*/
        WSM_MIB_ID_SET_HOST_MSG_TYPE_FILTER        = 0x1017,      /*4.29 SetHostMessageTypeFilter*/
        WSM_MIB_ID_P2P_FIND_INFO                   = 0x1018,      /*4.30 P2PFindInfo*/
        WSM_MIB_ID_P2P_PS_MODE_INFO                = 0x1019,      /*4.31 P2PPsModeInfo*/
        WSM_MIB_ID_SET_ETHERTYPE_DATAFRAME_FILTER  = 0x101a,      /*4.32 SetEtherTypeDataFrameFilter*/
        WSM_MIB_ID_SET_UDPPORT_DATAFRAME_FILTER    = 0x101b,      /*4.33 SetUDPPortDataFrameFilter*/
        WSM_MIB_ID_SET_MAGIC_DATAFRAME_FILTER      = 0x101c,      /*4.34 SetMagicDataFrameFilter*/
        WSM_MIB_ID_PROTECTED_MGMT_POLICY           = 0x1020,      /*4.38 Protected Management Frame policy*/
        WSM_MIB_ID_SET_HT_PROTECTION               = 0x1021,      /*4.39 SetHtProtection*/
        WSM_MIB_ID_SET_MULTI_MSG                   = 0x1024,      /*4.42 UseMultiTxConfMessage*/
        WSM_MIB_ID_KEEP_ALIVE_PERIOD               = 0x1025,      /*4.43 Keep-alive period*/
        WSM_MIB_ID_DISABLE_BSSID_FILTER            = 0x1026,      /*4.44 Ignore bss_id filtering in firmware*/
        WSM_MIB_ID_QUIET_INTERVAL_MARGIN           = 0x1027,      /*4.45 margin in us (before the quiet interval)*/
        WSM_MIB_ID_ARP_KEEP_ALIVE_PERIOD           = 0x1028,      /*4.46 Keep-alive period*/
        WSM_MIB_ID_PSEUDO_RATE_CONFIG              = 0x1029,      /*4.47 Pseudo Rate Info*/
        WSM_MIB_ID_MAC_ADDRESS_FILTERING           = 0x1030,      /*4.48 Set Max Address Data Frame Filter*/
        WSM_MIB_ID_IPV4_ADDRESS_FILTERING          = 0x1031,      /*4.49 Set IPv4 Address Data Frame Filter*/
        WSM_MIB_ID_IPV6_ADDRESS_FILTERING          = 0x1032,      /*4.50 Set IPv6 Address Data Frame Filter*/
        WSM_MIB_ID_FORWARDING_OFFLOAD              = 0x1033,      /*4.51 Frame forwarding offload enable*/
        WSM_MIB_ID_NS_IP_ADDRESSES_TABLE           = 0x1034,      /*4.52 Set IPv6 Address for Neighbor solicitation reply*/
        WSM_MIB_ID_INACTIVITY_TIMER                = 0x1035       /*Mib to Enable Inactivity Timer*/
} WsmMibId_t;

typedef enum wsm_mpdu_start_spacing_e {
        WSM_MPDU_START_SPACING_NO_RESTRIC          = 0x0,         /*No restriction*/
        WSM_MPDU_START_SPACING_QUARTER             = 0x1,         /*1/4 us*/        
        WSM_MPDU_START_SPACING_HALF                = 0x2,         /*1/2 us*/        
        WSM_MPDU_START_SPACING_ONE                 = 0x3,         /*1 us*/          
        WSM_MPDU_START_SPACING_TWO                 = 0x4,         /*2 us*/          
        WSM_MPDU_START_SPACING_FOUR                = 0x5,         /*4 us*/          
        WSM_MPDU_START_SPACING_EIGHT               = 0x6,         /*8 us*/          
        WSM_MPDU_START_SPACING_SIXTEEN             = 0x7          /*16 us*/         
} WsmMpduStartSpacing_t;

typedef enum wsm_op_power_mode_e {
        WSM_OP_POWER_MODE_ACTIVE                   = 0x0,
        WSM_OP_POWER_MODE_DOZE                     = 0x1,
        WSM_OP_POWER_MODE_QUIESCENT                = 0x2,
        WSM_OP_POWER_MODE_MASK                     = 0xf
} WsmOpPowerMode_t;

typedef enum wsm_ri_flags_e {
        WSM_RI_FLAGS_UNENCRYPTED                   = 0x0,         /*No encryption*/ 
        WSM_RI_FLAGS_WEP_ENCRYPTED                 = 0x1,         /*WEP*/           
        WSM_RI_FLAGS_TKIP_ENCRYPTED                = 0x2,         /*TKIP*/          
        WSM_RI_FLAGS_AES_ENCRYPTED                 = 0x3,         /*AES*/           
        WSM_RI_FLAGS_WAPI_ENCRYPTED                = 0x4          /*WAPI*/          
} WsmRiFlags_t;

typedef enum wsm_rpi_level_e {
        WSM_RPI_LEVEL__87                          = 0x0,         /*Power <= -87*/  
        WSM_RPI_LEVEL_87_82                        = 0x1,         /*-87 <= Power <= -82*/
        WSM_RPI_LEVEL_82_77                        = 0x2,         /*-82 <= Power <= -77*/
        WSM_RPI_LEVEL_77_72                        = 0x3,         /*-77 <= Power <= -72*/
        WSM_RPI_LEVEL_72_67                        = 0x4,         /*-72 <= Power <= -67*/
        WSM_RPI_LEVEL_67_62                        = 0x5,         /*-67 <= Power <= -62*/
        WSM_RPI_LEVEL_62_57                        = 0x6,         /*-62 <= Power <= -57*/
        WSM_RPI_LEVEL_57_                          = 0x7          /*-57 <= Power*/  
} WsmRpiLevel_t;

typedef enum wsm_sam_e {
        WSM_SAM_MIXED_MODE                         = 0x0,
        WSM_SAM_GREENFIELD_MODE                    = 0x1
} WsmSam_t;

typedef enum wsm_tmplt_e {
        WSM_TMPLT_PRBREQ                           = 0x0,         /*Probe request frame*/
        WSM_TMPLT_BCN                              = 0x1,         /*Beacon frame*/  
        WSM_TMPLT_NULL                             = 0x2,         /*NULL data frame*/
        WSM_TMPLT_QOSNUL                           = 0x3,         /*QoS NULL data frame*/
        WSM_TMPLT_PSPOLL                           = 0x4,         /*PS-Poll frame*/ 
        WSM_TMPLT_PRBRES                           = 0x5,         /*Probe response frame*/
        WSM_TMPLT_ARP                              = 0x6,         /*ARP frame*/     
        WSM_TMPLT_NA                               = 0x7          /*Neighbor acknowledgement frame*/
} WsmTmplt_t;

typedef enum wsm_wcdma_band_e {
        WSM_WCDMA_BAND_I                           = 0x1,         /*WCDMA band I*/  
        WSM_WCDMA_BAND_II                          = 0x2,         /*WCDMA band II*/ 
        WSM_WCDMA_BAND_III                         = 0x3,         /*WCDMA band II*/ 
        WSM_WCDMA_BAND_IV                          = 0x4,         /*WCDMA band IV*/ 
        WSM_WCDMA_BAND_V                           = 0x5,         /*WCDMA band V*/  
        WSM_WCDMA_BAND_VIII                        = 0x8          /*WCDMA band VIII*/
} WsmWcdmaBand_t;

/**************************************************/

typedef struct __attribute__((__packed__)) wsm_hi_reset_flags_s {
        u8       ResetStat : 1;                    /*0 Reset statistics - 1 Do not reset statistics*/
        u8       ResetAllInt : 1;                  /*Set high to reset all interfaces, not only the one indicated by link_id*/
        u8       Reserved : 6;       
        u8       Reserved2[WSM_API_RESERVED2_SIZE];   /*Reserved2 0*/   
} WsmHiResetFlags_t;

typedef struct __attribute__((__packed__)) wsm_hi_scan_type_s {
        u8       Type : 1;                         /*bit0 : 0=foreground/1=background type: wsm*/
        u8       Mode : 2;                         /*bit1-2 : 0=single scan, 1=auto periodic scan, 2=auto quality scan     : scan is done only if reception quality (tbd) is below a threshold*/
        u8       Reserved : 5;                     /*Reserved*/      
} WsmHiScanType_t;

typedef struct __attribute__((__packed__)) wsm_hi_scan_flags_s {
        u8       Fbg : 1;                          /*1 - forced background scan.     Forced background scan means if the station cannot enter the power-save mode,    it will be force to perform a background scan.     Only valid when ScanType is background scan.*/
        u8       Split : 1;                        /*A split scan method is to be used*/
        u8       Pre : 1;                          /*Preamble type: 0 : Long, 1 : Short*/
        u8       TxMod : 1;                        /*11n Tx mode: 0 : Mixed, 1 : Greenfield*/
        u8       UseMacAddr1 : 1;                  /*Use the second mac address*/
        u8       Reserved : 3;                     /*Reserved*/      
} WsmHiScanFlags_t;

typedef struct __attribute__((__packed__)) wsm_hi_auto_scan_param_s {
        __le16   Interval;                         /*Interval period in TUs that the device will re-execute the requested scan.    Maximum value supported by the device is 256 s.    Applicable to auto-scan ScanType only.*/
        u8       Reserved;                         /*Reserved*/      
        s8       RssiThr;                          /*Scan RSSI Threshold in dBm. Scan reports with lower RSSI value will be discarded and not passed to the host. A value of zero (default) will make all reports pass.*/
} WsmHiAutoScanParam_t;

typedef struct __attribute__((__packed__)) wsm_hi_ssid_def_s {
        __le32   SSIDLength;                       /*Length of the SSID*/
        u8       SSID[WSM_API_SSID_SIZE];          /*SSID character 0*/
} WsmHiSsidDef_t;

typedef struct __attribute__((__packed__)) wsm_hi_queue_id_s {
        u8       QueueId : 2;                      /*Transmit queue ID (as defined in set Tx queue params) specifies the Access Category Index (ACI) of the queue. 0 - BE ; 1 - BG ; 2 - VI ; 3 - VO type: wsm*/
        u8       PerStaId : 4;                     /*Bits 5 to 2 : peer STA id (from 1 to 14) type: wsm_pm_mode*/
        u8       Reserved : 2;                     /*Bits 7 to 6: reserved*/
} WsmHiQueueId_t;

typedef struct __attribute__((__packed__)) wsm_hi_tx_flags_s {
        u8       Startexp : 1;                     /*Start expiry time from : 0 - the first Tx attempt (default) 1 - the receipt of the Tx request*/
        u8       Pta : 3;                          /*PTA priority*/  
        u8       Txrate : 3;                       /*Tx rate retry policy*/
        u8       Offset : 1;                       /*Packet Frame Control field offset : 0 - at Frame offset 1 - at Frame offset plus 2 bytes*/
} WsmHiTxFlags_t;

typedef struct __attribute__((__packed__)) wsm_hi_ht_tx_parameters_s {
        u8       FrameFormat : 4;                  /*Transmission frame format. 0: Non-HT. 1: Mixed format. 2: Greenfield format. Other values reserved*/
        u8       FecCoding : 1;                    /*FEC coding selection. 0: legacy, BCC. 1: LDPC*/
        u8       ShortGi : 1;                      /*Guard Interval size. 0: legacy, long GI. 1: short GI*/
        u8       Unused : 1;                       /*set to 0*/      
        u8       Stbc : 1;                         /*STBC requirement for this frame. 0: STBC not allowed. 1: STBC allowed*/
        u8       Reserved1;                        /*Reserved*/      
        u8       Aggregation : 1;                  /*aggregation 11N*/
        u8       AggrFirst : 1;                    /*aggregation first MPDU*/
        u8       AggrLast : 1;                     /*aggregation last MPDU*/
        u8       Reserved2 : 5;                    /*Reserved*/      
        u8       Reserved3;                        /*Reserved*/      
} WsmHiHtTxParameters_t;

typedef struct __attribute__((__packed__)) wsm_hi_tx_result_flags_s {
        u8       Aggr : 1;                         /*Only valid for the WSM_SUCCESS status. 0 - Frame was not sent aggregated. 1 - Frame was sent aggregated*/
        u8       Requeue : 1;                      /*Valid only when status is WSM_REQUEUE. 1 - Host should re-queue this frame later. 0 - Host should not re-queue this frame. type: wsm*/
        u8       AckPolicy : 2;                    /*Only valid for the WSM_SUCCESS status. 00b - Normal ACK ; 01b - No ACK ; 10b - No explicit acknowledgement ; 11b - Block ACK*/
        u8       TxopLimit : 1;                    /*The TXOP limit for the ACI was temporarily increased to allow this frame to transmit.*/
        u8       MoreTxForMulti : 1;               /*seen in FW .h*/ 
        u8       TxResumePresent : 1;              /*seen in FW .h*/ 
        u8       TxState : 1;                      /*Indicates whether the TX state structure is available in the confirmation structure */
        u8       Reserved;                         /*Reserved*/      
} WsmHiTxResultFlags_t;

typedef struct __attribute__((__packed__)) wsm_hi_rx_flags_s {
        u8       Encryp : 3;                       /*Frame encryption type type: wsm*/
        u8       InAggr : 1;                       /*Bit 3 : 1 - Frame was part of an aggregation*/
        u8       FirstAggr : 1;                    /*Bit 4 : 1 - Frame was first in an aggregation (Only valid if bit 03 = 1)*/
        u8       LastAggr : 1;                     /*Bit 5 : 1 - Frame was last in an aggregation (Only valid if bit 03 = 1)*/
        u8       Defrag : 1;                       /*Bit 6 : 1 - Indicates a defragmented frame*/
        u8       Beacon : 1;                       /*Bit 7 : 1 - Indicates a beacon frame*/
        u8       Tim : 1;                          /*Bit 8 : 1 - Indicates the STA bit beacon TIM field*/
        u8       Bitmap : 1;                       /*Bit 9 : 1 - Indicates that the virtual bitmap of the beacon frame contains multicast bit*/
        u8       MatchSsid : 1;                    /*Bit 10 : 1 - Indicates the frame contains a matching SSID*/
        u8       MatchBssid : 1;                   /*Bit 11 : 1 - Indicates the frame contains a matching BSSID*/
        u8       More : 1;                         /*Bit 12 : 1 - Indicates the More bit is set in the Framectl field*/
        u8       Meas : 1;                         /*Bit 13 : 1 - Indicates the frame received during a measurement process*/
        u8       Ht : 1;                           /*Bit 14 : 1 - Indicates the frame received as an HT packet*/
        u8       Stbc : 1;                         /*Bit 15 : 1 - Indicates the frame received with STBC*/
        u8       MatchStationid : 1;               /*Bit 16 : 1 - Indicates the address 1 field matches dot11StationId*/
        u8       GroupAddr : 1;                    /*Bit 17 : 1 - Indicates the group address present in the address 1 field*/
        u8       BcAddr : 1;                       /*Bit 18 : 1 - Indicates the broadcast address present in the address 1 field*/
        u8       KeyType : 1;                      /*Bit 19 : Reports the key type used with encrypted frames ; 0 - Indicates the pairwise key used ; 1 - Indicates the group key used*/
        u8       KeyIndex : 4;                     /*Bits 23 to 20 : KeyIndex used for decryption*/
        u8       Timestamp : 1;                    /*1 - An 8-byte of timestamp is appended at the end of a beacon frame or a probe-response frame.             The timestamp is the device TSF time recorded at the time when the start of the Timestamp field in the beacon frame or the probe-response frame is received.             This information can be used to find out the TSF difference between our BSS and the foreign BSS.             If this bit is set, the message size includes the length of the timestamp.*/
        u8       PeerStaId : 4;                    /*peer STA id (from 1 to 14)*/
        u8       Reserved : 2;                     /*Reserved*/      
        u8       BeaconFiltering : 1;              /*used internally to apply beacon filtering*/
} WsmHiRxFlags_t;

typedef struct __attribute__((__packed__)) wsm_hi_join_flags_s {
        u8       Sync : 1;                         /*Bit 0 = 0 - synchronized join ; 1 - unsynchronized join type: wsm_mode*/
        u8       P2P : 1;                          /*Bit 1 = 0 - The BSS owner is a legacy WLAN AP ; 1 - The BSS owner is a P2P GO type: wsm_measure_type*/
        u8       ForceNoBeacon : 1;                /*Bit 2 = 1 - Force to join BSS with the BSSID and the SSID specified without waiting for beacons. The ProbeForJoin parameter is ignored. type: wsm_measure_type*/
        u8       Priority : 1;                     /*Bit 3 = 1 - Give probe request/response higher priority over the BT traffic type: wsm*/
        u8       UseMacAddrIf : 1;                 /*Bit 4 - Index of MAC address to use*/
        u8       ForceWithInd : 1;                 /*Bit 5 - Force with Join Complete Indication  type: wsm_preamble*/
        u8       ChangeP2PInt : 1;                 /*Bit 6 - Use a different P2P Interface Address*/
        u8       Reserved2 : 1;                    /*Reserved for future*/
} WsmHiJoinFlags_t;

typedef struct __attribute__((__packed__)) wsm_hi_pm_mode_s {
        u8       PmMode : 1;                       /*Bit 0 = 0 - Active mode, when this mode is entered, the device automatically transmits a frame with the power management bit cleared to inform the AP that the STA is in the active mode            Bit 0 = 1 - PS mode, when this mode is entered, the device automatically transmits a frame with the power management bit set to inform the AP that the STA has entered the PS mode.            Bit 7 = 1 - Fast power-saving mode is enabled. This bit is only valid with bit 0 is set to 1. type: wsm*/
        u8       Reserved : 6;                     /*Reserved*/      
        u8       FastPsm : 1;                      /*Bit 7 = 1 - Fast power-saving mode is enabled. This bit is only valid with bit 0 is set to 1.*/
} WsmHiPmMode_t;

typedef struct __attribute__((__packed__)) wsm_hi_bss_flags_s {
        u8       LostCountOnly : 1;                /*Bit 0 = 1: Only update the beacon lost count limit and reset the internal beacon lost counter. type: wsm*/
        u8       Reserved : 7;                     /*Reserved type: wsm_pm_mode*/
} WsmHiBssFlags_t;

typedef struct __attribute__((__packed__)) wsm_hi_channel_mode_s {
        u8       Reserved2 : 1;                    /*Reserved type: wsm*/
        u8       Transmit : 1;                     /*1 - The STA will not transmit any further frames until the channel switch has completed.*/
        u8       Enhanced : 1;                     /*1 - Enhanced switch-channel mode. Extra eight fields are available in the request structure (those that come after NewChannelNumber). type: wsm_ackplcy*/
        u8       Reserved1 : 5;                    /*Reserved*/      
} WsmHiChannelMode_t;

typedef struct __attribute__((__packed__)) wsm_hi_switch_flags_s {
        u8       Abort : 1;                        /*1 - Abort the switch channel operation. The other fields are ignored.*/
        u8       Indic : 1;                        /*1 - No start indication. In the enhanced mode, the device normally sends two channel-switch indications             - one indicates the new channel is switched and another indicates the original channel is restored.             If the host only uses channel switch to listen, it can set this flag and tell the device not to send the first indication.*/
        u8       PlcpPreamb : 2;                   /*Specifies the PLCP preamble type used*/
        u8       Reserved1 : 1;                    /*Reserved*/      
        u8       SyncBss : 1;                      /*1 - Synchronize the start of channel switch with a foreign BSS. If Bit 3 is set, the fields are relevant. Bit 3 has priority over Bit 1.*/
        u8       SyncEnd : 1;                      /*1 - Synchronize channel switch at end. The device aborts the operation in the new channel if an activity in the original channel is scheduled.*/
        u8       SyncStart : 1;                    /*1 - Synchronize channel switch on start. The device starts to switch to the new channel when it is idle.*/
        u8       Reserved2;                        /*Reserved*/      
} WsmHiSwitchFlags_t;

typedef struct __attribute__((__packed__)) wsm_hi_mode_s {
        u8       StartMode : 2;                    /*Bit 1-0 : Start mode 0: MiniAP 1: P2P GO 2: generic channel  type: wsm_hi_state*/
        u8       Unused : 2;         
        u8       IndexMacUse : 1;                  /*Bit 4 : index of MAC address to use*/
        u8       P2PMultipleInterface : 1;         /*Bit 5 : Use of multiple interface*/
        u8       P2PListenProcedure : 1;           /*Bit 6 : P2P listen procedure*/
        u8       Reserved : 1;                     /*Reserved*/      
} WsmHiMode_t;

typedef struct __attribute__((__packed__)) wsm_hi_suspend_resume_flags_s {
        u8       ResumeOrSuspend : 1;              /*0 - Stop sending further Tx requests to the device for this link. 1 -Resume Tx. type: wsm*/
        u8       Ac : 2;                           /*The AC on which Tx must be suspended or resumed. This is applicable only for UAPSD.*/
        u8       CastType : 1;                     /*1 - Transmit broadcast or multicast frames. This is to instruct the host to transmit broadcast or multicast traffic, if buffered in the host after the DTIM beacon.            0 - Transmit unicast frames.*/
        u8       Reserved1 : 4;                    /*Reserved*/      
        u8       Reserved2;                        /*Reserved*/      
} WsmHiSuspendResumeFlags_t;

typedef struct __attribute__((__packed__)) wsm_hi_ie_flags_s {
        u8       Beacon : 1;                       /*Update beacon*/ 
        u8       ProbeResp : 1;                    /*Update probe response*/
        u8       ProbeReq : 1;                     /*Update probe request*/
        u8       Reserved1 : 5;                    /*Reserved*/      
        u8       Reserved2;                        /*Reserved*/      
} WsmHiIeFlags_t;

typedef struct __attribute__((__packed__)) wsm_hi_map_link_flags_s {
        u8       MapDirection : 1;                 /*0 to map, 1 to unmap type: wsm*/
        u8       Mfpc : 1;                         /*Set to 1 if STA advertised MFPC bit*/
        u8       Reserved : 6;                     /*Reserved*/      
} WsmHiMapLinkFlags_t;

typedef struct __attribute__((__packed__)) wsm_hi_wep_pairwise_key_s {
        u8       PeerAddress[WSM_API_PEER_ADDRESS_SIZE];   /*MAC address of the peer station type: sl_configure_ind_status*/
        u8       Reserved;                         /*Reserved type: sl_configure_skey_invld*/
        u8       KeyLength;                        /*Key Length in bytes*/
        u8       KeyData[WSM_API_KEY_DATA_SIZE];   /*Key data*/      
} WsmHiWepPairwiseKey_t;

typedef struct __attribute__((__packed__)) wsm_hi_wep_group_key_s {
        u8       KeyId;                            /*Unique per key identifier. Standard only allows up to four WEP group keys.*/
        u8       KeyLength;                        /*Key length in bytes*/
        u8       Reserved[WSM_API_RESERVED_SIZE_2];   /*Reserved*/      
        u8       KeyData[WSM_API_KEY_DATA_SIZE];   /*Key data*/      
} WsmHiWepGroupKey_t;

typedef struct __attribute__((__packed__)) wsm_hi_tkip_pairwise_key_s {
        u8       PeerAddress[WSM_API_PEER_ADDRESS_SIZE];   /*MAC address of the peer station*/
        u8       Reserved[WSM_API_RESERVED_SIZE_2];   /*Reserved*/      
        u8       TkipKeyData[WSM_API_TKIP_KEY_DATA_SIZE];   /*TKIP Key data*/ 
        u8       RxMicKey[WSM_API_RX_MIC_KEY_SIZE];   /*Rx MIC key*/    
        u8       TxMicKey[WSM_API_TX_MIC_KEY_SIZE];   /*Tx MIC key*/    
} WsmHiTkipPairwiseKey_t;

typedef struct __attribute__((__packed__)) wsm_hi_tkip_group_key_s {
        u8       TkipKeyData[WSM_API_TKIP_KEY_DATA_SIZE];   /*TKIP key data*/ 
        u8       RxMicKey[WSM_API_RX_MIC_KEY_SIZE];   /*Rx MIC key*/    
        u8       KeyId;                            /*Key Id*/        
        u8       Reserved[WSM_API_RESERVED_SIZE_3];   /*Reserved*/      
        u8       RxSequenceCounter[WSM_API_RX_SEQUENCE_COUNTER_SIZE];   /*Receive sequence counter*/
} WsmHiTkipGroupKey_t;

typedef struct __attribute__((__packed__)) wsm_hi_aes_pairwise_key_s {
        u8       PeerAddress[WSM_API_PEER_ADDRESS_SIZE];   /*MAC address of the peer station*/
        u8       Reserved[WSM_API_RESERVED_SIZE_2];   /*Reserved*/      
        u8       AesKeyData[WSM_API_AES_KEY_DATA_SIZE];   /*AES key data*/  
} WsmHiAesPairwiseKey_t;

typedef struct __attribute__((__packed__)) wsm_hi_aes_group_key_s {
        u8       AesKeyData[WSM_API_AES_KEY_DATA_SIZE];   /*AES key data*/  
        u8       KeyId;                            /*Key Id*/        
        u8       Reserved[WSM_API_RESERVED_SIZE_3];   /*Reserved*/      
        u8       RxSequenceCounter[WSM_API_RX_SEQUENCE_COUNTER_SIZE];   /*Receive sequence counter*/
} WsmHiAesGroupKey_t;

typedef struct __attribute__((__packed__)) wsm_hi_wapi_pairwise_key_s {
        u8       PeerAddress[WSM_API_PEER_ADDRESS_SIZE];   /*MAC address of the peer station*/
        u8       KeyId;                            /*Key Id*/        
        u8       Reserved;                         /*Reserved*/      
        u8       WapiKeyData[WSM_API_WAPI_KEY_DATA_SIZE];   /*WAPI key data*/ 
        u8       MicKeyData[WSM_API_MIC_KEY_DATA_SIZE];   /*MIC key data*/  
} WsmHiWapiPairwiseKey_t;

typedef struct __attribute__((__packed__)) wsm_hi_wapi_group_key_s {
        u8       WapiKeyData[WSM_API_WAPI_KEY_DATA_SIZE];   /*WAPI key data*/ 
        u8       MicKeyData[WSM_API_MIC_KEY_DATA_SIZE];   /*MIC key data*/  
        u8       KeyId;                            /*Key Id*/        
        u8       Reserved[WSM_API_RESERVED_SIZE_3];   /*Reserved*/      
} WsmHiWapiGroupKey_t;

typedef struct __attribute__((__packed__)) wsm_hi_igtk_group_key_s {
        u8       IGTKKeyData[WSM_API_IGTK_KEY_DATA_SIZE];   /*IGTK key data*/ 
        u8       KeyId;                            /*Key Id*/        
        u8       Reserved[WSM_API_RESERVED_SIZE_3];   /*Reserved*/      
        u8       IPN[WSM_API_IPN_SIZE];            /*IGTK packet number*/
} WsmHiIgtkGroupKey_t;

typedef struct __attribute__((__packed__)) wsm_hi_meas_channel_load_params_s {
        u8       Reserved;                         /*Reserved*/      
        u8       ChannelLoadCCA;                   /*Determines whether to do a channel load (value 1) or a CCA measurement (value 0).*/
        __le16   ChannelNum;                       /*Channel number on which the load needs to be measured.*/
        __le16   RandomInterval;                   /*Upper bound of the random delay to be used before making the measurement. Expressed in units of TUs (for use with the channel load measurement).*/
        __le16   MeasurementDuration;              /*Preferred or mandatory duration of the requested measurement. Expressed in units of TUs.*/
        __le64   MeasurementStartTime;             /*Absolute time on which the measurement needs to be started (for use with the CCA measurement).*/
} WsmHiMeasChannelLoadParams_t;

typedef struct __attribute__((__packed__)) wsm_hi_meas_noise_histogram_params_s {
        u8       Reserved;                         /*Reserved*/      
        u8       IpiRpi;                           /*Indicates whether an IPI or RPI measurement is required.	0 - IPI measurement (start time determined by the RandomInterval) ; 1 - RPI measurement (start time determined by the MeasurementStartTime)*/
        __le16   ChannelNum;                       /*Channel number on which the load needs to be measured.*/
        __le16   RandomInterval;                   /*Upper bound of the random delay to be used before making the measurement. Expressed in units of TUs (for use with the IPI measurement).*/
        __le16   MeasurementDuration;              /*Preferred or mandatory duration of the requested measurement. Expressed in units of TUs.*/
        __le64   MeasurementStartTime;             /*Absolute time on which the measurement needs to be started (for use with the RPI measurement).*/
} WsmHiMeasNoiseHistogramParams_t;

typedef struct __attribute__((__packed__)) wsm_hi_meas_beacon_params_s {
        __le16   RandomInterval;                   /*Upper bound of the random delay to be used before making the measurement. Expressed in units of TUs (for use with the channel load measurement).*/
        __le16   Reserved;                         /*Reserved*/      
        u8       Band;                             /*The frequency band. 0 - 2.4GHz, 1 - 5GHz  == SAME AS WSM_HI_START_SCAN_REQ_BODY ==*/
        WsmHiScanType_t ScanType;                  /*Scan Type type: wsm_hi_scan_type*/
        WsmHiScanFlags_t ScanFlags;                /*Scan Flags type: wsm_hi_scan_flags*/
        u8       MaxTransmitRate;                  /*This parameter specifies the transmission rate to be used for sending probe requests.*/
        WsmHiAutoScanParam_t AutoScanParam;         /*Applicable to auto-scan ScanType only.         Interval period in TUs that the device will re-execute the requested scan. Maximum value supported by the device is 256 s. type: wsm_hi_auto_scan_param*/
        u8       NumOfProbeRequests;               /*Number of probe requests (per SSID) sent to one (1) channel.         Zero (0) means that none is send, which means that a passive scan is to be done. Value greater than zero (0) means that an active scan is to be done.*/
        u8       ProbeDelay;                       /*The delay time (in microseconds) period before sending a probe request.*/
        u8       NumOfSSIDs;                       /*Number of SSIDs provided in the scan command (this is zero (0) in broadcast scan). The maximum number of SSIDs that the device can store is one.*/
        u8       NumOfChannels;                    /*Number of channels to be scanned. [Maximum number is 1.]*/
        __le32   MinChannelTime;                   /*time in TUs*/   
        __le32   MaxChannelTime;                   /*time in TUs*/   
        __les32  TxPowerLevel;                     /*time in TUs*/   
} WsmHiMeasBeaconParams_t;

typedef struct __attribute__((__packed__)) wsm_hi_meas_sta_stats_params_s {
        u8       PeerMacAddress[WSM_API_PEER_MAC_ADDRESS_SIZE];   /*RA or TA MAC address for the frame statistics of this measurement 0*/
        __le16   RandomInterval;                   /*Upper bound of the random delay to be used before making the measurement. Expressed in units of TUs.*/
        __le16   MeasurementDuration;              /*Duration of the requested measurement in TUs.        Duration mandatory bit is not taken into account.        0 - Reports the current values for the requested statistics group data.        >0 - Reports the change in the requested statistics group data values measured within the measurement duration.*/
        u8       GroupId;                          /*The requested statistics group.*/
        u8       Reserved;                         /*Reserved*/      
} WsmHiMeasStaStatsParams_t;

typedef struct __attribute__((__packed__)) wsm_hi_meas_link_measurement_params_s {
        u8       Reserved[WSM_API_RESERVED_SIZE_4];   /*Reserved 0*/    
} WsmHiMeasLinkMeasurementParams_t;

typedef struct __attribute__((__packed__)) wsm_hi_meas_channel_load_results_s {
        __le16   Reserved;                         /*Reserved*/      
        u8       ChannelLoadCCA;                   /*Determines whether to do a channel load (value 1) or a CCA measurement (value 0).*/
        u8       ChannelNum;                       /*Channel number on which the load needs to be measured.*/
        __le64   ActualMeasurementStartTime;       /*Value of the measuring STA TSF timer at the time the measurement has started.*/
        __le16   MeasurementDuration;              /*Duration over which the channel-load report was measured. Expressed in units of TUs.*/
        u8       CCAbusyFraction;                  /*Fractional duration over which CCA indicated that the channel was busy during the measurement duration.*/
        u8       ChannelLoad;                      /*Proportion of the measurement duration for which the measuring STA determined the channel to be busy as indicated by either the physical (CCA) or the virtual carrier sense.*/
} WsmHiMeasChannelLoadResults_t;

typedef struct __attribute__((__packed__)) wsm_hi_meas_noise_histogram_results_s {
        __le16   Reserved;                         /*Reserved*/      
        u8       Reserved2;                        /*Reserved*/      
        u8       ChannelNum;                       /*Channel number on which the histogram was measured.*/
        __le64   ActualMeasurementStartTime;       /*Value of the measuring STA TSF timer at the time the measurement has started.*/
        __le16   MeasurementDuration;              /*Duration over which the noise histogram report was measured. Expressed in units of TUs.*/
        u8       AntennaID;                        /*Identifying number for the antenna(s) used for this measurement.*/
        u8       IpiRpi;                           /*Indicates whether the result (of PI densities) is an IPI measurement result (value 0) or an RPI measurement result (value 1).*/
        u8       Pi0Density;                       /*IPI/RPI density observed in the channel for level 0*/
        u8       Pi1Density;                       /*IPI/RPI density observed in the channel for level 1*/
        u8       Pi2Density;                       /*IPI/RPI density observed in the channel for level 2*/
        u8       Pi3Density;                       /*IPI/RPI density observed in the channel for level 3*/
        u8       Pi4Density;                       /*IPI/RPI density observed in the channel for level 4*/
        u8       Pi5Density;                       /*IPI/RPI density observed in the channel for level 5*/
        u8       Pi6Density;                       /*IPI/RPI density observed in the channel for level 6*/
        u8       Pi7Density;                       /*IPI/RPI density observed in the channel for level 7*/
        u8       Pi8Density;                       /*IPI density observed in the channel for level 8 (invalid in case of RPI measurement)*/
        u8       Pi9Density;                       /*IPI density observed in the channel for level 9 (invalid in case of RPI measurement)*/
        u8       Pi10Density;                      /*IPI density observed in the channel for level 10 (invalid in case of RPI measurement)*/
        u8       Reserved3;                        /*Reserved*/      
} WsmHiMeasNoiseHistogramResults_t;

typedef struct __attribute__((__packed__)) wsm_hi_meas_beacon_results_s {
        __le16   MeasurementDuration;              /*Duration over which the beacon report was measured. Expressed in units of TUs.*/
        __le16   Reserved;                         /*Reserved*/      
        __le64   StartTsf;                         /*Value of the measuring STA TSF timer at the time the measurement started.*/
        __le64   Duration;                         /*Measurement Duration*/
} WsmHiMeasBeaconResults_t;

typedef struct __attribute__((__packed__)) wsm_hi_meas_sta_stats_results_s {
        __le16   MeasurementDuration;              /*The duration over which the change in statistics group data was measured and reported. Expressed in units of TUs.*/
        u8       GroupId;                          /*Indicates the requested statistics group describing statistics group data. type: wsm_hi_sta_stat*/
        u8       StatisticsGroupDataLength;        /*Length (in octets) of statistics group data.*/
        u8       StatisticsGroupData[WSM_API_STATISTICS_GROUP_DATA_SIZE];   /*Length (in octets) of statistics group data 0*/
} WsmHiMeasStaStatsResults_t;

typedef struct __attribute__((__packed__)) wsm_hi_meas_link_measurement_results_s {
        __les16  TransmitPower;                    /*Power level at which the remote device sent the link measurement request*/
        u8       RxAntennaID;                      /*ID of the antenna on which the request was received*/
        u8       TxAntennaID;                      /*ID of the antenna on which a reply was sent*/
        __les32  NoiseLeveldBm;                    /*Noise level in dBm*/
        s8       LatestRssi;                       /*RSSI for the received link measurement request*/
        u8       Reserved1;                        /*Reserved*/      
        u8       Reserved2;                        /*Reserved*/      
        u8       Reserved3;                        /*Reserved*/      
} WsmHiMeasLinkMeasurementResults_t;

typedef struct __attribute__((__packed__)) wsm_hi_p2p_device_type_s {
        __le16   CategoryId;                       /*The major category ID of the device.*/
        u8       Oui12[WSM_API_OUI12_SIZE];        /*First two bytes of OUI 0*/
        u8       Oui34[WSM_API_OUI34_SIZE];        /*Second part of OUI 0*/
        __le16   SubCategoryId;                    /*Sub category ID of the device.*/
} WsmHiP2PDeviceType_t;

typedef struct __attribute__((__packed__)) wsm_hi_ie_table_entry_s {
        u8       IeId;                             /*Information element number*/
        u8       HasChanged : 1;                   /*Bit 0 = 1 - If IE has changed*/
        u8       NoLonger : 1;                     /*Bit 1 = 1 - If IE is no longer present.*/
        u8       HasAppeared : 1;                  /*Bit 2 = 1 - If IE has appeared.*/
        u8       Reserved : 1;                     /*Reserved*/      
        u8       NumMatchData : 4;                 /*Bits 7 to 4 - Number of valid MatchData bytes. Applicable to IE 221 only.*/
        u8       Oui[WSM_API_OUI_SIZE];            /*OUI of the information element 221. This field is only present for IE 221. 0*/
        u8       MatchData[WSM_API_MATCH_DATA_SIZE];   /*OUI type of IE 221. This field is only present for IE 221. 0*/
} WsmHiIeTableEntry_t;

typedef struct __attribute__((__packed__)) wsm_hi_mib_tx_rate_retry_policy_s {
        u8       PolicyIndex;                      /*The rate retry policy index of this policy. Valid values are 0 to 7.*/
        u8       ShortRetryCount;                  /*ShortRetryCount to be used with this policy*/
        u8       LongRetryCount;                   /*LongRetryCount to be used with this policy*/
        u8       IndexUse : 2;       
        u8       Terminate : 1;                    /*Bit 02 - 0 : Do not terminate retries when the Tx rate retry policy finishes.            1: Terminate retries when the Tx rate retry policy finishes.*/
        u8       CountInit : 1;                    /*Bit 03 - 0: Do not count initial frame transmission as part of the rate retry counting.            1:  Count initial frame transmission as part of the rate retry counting but not as a retry attempt.*/
        u8       Reserved : 4;                     /*Reserved*/      
        u8       RateRecoveryCount;                /*The number of successful first time transmissions before the device will attempt to move to a higher data rate within TxRateRetryPolicy.            Only valid for policies with PolicyFlags  bits 01 to 00 = 10b*/
        u8       Reserved2[WSM_API_RESERVED2_SIZE];   /*Reserved2 0*/   
        __le32   RateCountIndices0700;             /*Counts for rate index 7 to 0*/
        __le32   RateCountIndices1508;             /*Counts for rate index 15 to 8*/
        __le32   RateCountIndices2316;             /*Counts for rate index 23 to 16*/
} WsmHiMibTxRateRetryPolicy_t;

typedef struct __attribute__((__packed__)) wsm_hi_mib_mac_address_data_frame_filter_s {
        u8       FilterMode;                       /*1 - if MAC Address matches Discard Frame. 2 - If MAC Address matches Accept Frame*/
        u8       AddressType;                      /*1 - MAC address A1 will be used to be compared. 2 - MAC address A2 will be used to be compared. 3 - MAC address A3 will be used to be compared*/
        u8       Address[WSM_API_ADDRESS_SIZE];    /*The MAC Address to filter on 0*/
} WsmHiMibMacAddressDataFrameFilter_t;

typedef struct __attribute__((__packed__)) wsm_hi_mib_ipv4_address_data_frame_filter_s {
        u8       FilterMode;                       /*1 - if IPv4 Address matches Discard Frame. 2 - If IPv4 Address matches Accept Frame*/
        u8       AddressMode;                      /*1 - Source address in IPv4 header. 2 - Destination address in IPv4 header*/
        u8       Reserved[WSM_API_RESERVED_SIZE_2];   /*To ensure consistent padding 0*/
        u8       Address[WSM_API_ADDRESS_SIZE_4];   /*The IPv4 address to filter on 0*/
} WsmHiMibIpv4AddressDataFrameFilter_t;

typedef struct __attribute__((__packed__)) wsm_hi_mib_ipv6_address_data_frame_filter_s {
        u8       FilterMode;                       /*1 - if IPv6 Address matches Discard Frame. 2 - If IPv6 Address matches Accept Frame*/
        u8       AddressMode;                      /*1 - Source address in IPv6 header. 2 - Destination address in IPv6 header*/
        u8       Reserved[WSM_API_RESERVED_SIZE_2];   /*To ensure consistent padding 0*/
        u8       Address[WSM_API_ADDRESS_SIZE_16];   /*The IPv6 address to filter on 0*/
} WsmHiMibIpv6AddressDataFrameFilter_t;

typedef struct __attribute__((__packed__)) wsm_hi_debug_ind__epta_rt_stats_s {
        __le32   MsgStartIdentifier; 
        __le32   IsBtRt;             
        __le32   Timestamp;          
        __le32   LinkId;             
        __le32   NumRequests;        
        __le32   NumGrants;          
        __le32   ServiceWindow;      
        __le32   ServiceInterval;    
        __le32   BtTrafficPriority;  
        __le32   BtTrafficType;      
        __le32   IsBtMaster;         
} WsmHiDebugIndEptaRtStats_t;

typedef struct __attribute__((__packed__)) wsm_hi_debug_ind__epta_nrt_stats_s {
        __le32   MsgStartIdentifier; 
        __le32   IsBtRt;             
        __le32   Timestamp;          
        __le32   NumRequests;        
        __le32   NumGrants;          
        __le32   Reserved[WSM_API_RESERVED_SIZE_6];   /*To ensure consistent padding 0*/
} WsmHiDebugIndEptaNrtStats_t;

typedef struct __attribute__((__packed__)) wsm_hi_filter_condition_mask_s {
        u8       MaskValue[WSM_API_MASK_VALUE_SIZE];
        u8       ResultValue[WSM_API_RESULT_VALUE_SIZE];
} WsmHiFilterConditionMask_t;

typedef struct __attribute__((__packed__)) wsm_hi_mib_ethertype_data_frame_filter_s {
        u8       FilterMode;                       /*Selects the filter mode type: wsm_filter_mode*/
        u8       Reserved;                         /*Reserved*/      
        __le16   EtherType;                        /*EtherType to match.*/
} WsmHiMibEthertypeDataFrameFilter_t;

typedef struct __attribute__((__packed__)) wsm_hi_mib_udpports_data_frame_filter_s {
        u8       FilterMode;                       /*Selects the filter mode type: wsm_filter_mode*/
        u8       IsSrcPort;                        /*0 - Match against the destination port of the UDP header. 1 - Match against the source port of the UDP header*/
        __le16   UDPPort;                          /*The UDP port number to filter on.*/
} WsmHiMibUdpportsDataFrameFilter_t;

typedef struct __attribute__((__packed__)) wsm_hi_mib_mac_addresses_s {
        u8       MacAddr0[WSM_API_MAC_ADDR0_SIZE];   /*mac address 0 character 0*/
        u8       MacAddr1[WSM_API_MAC_ADDR1_SIZE];   /*mac address 1 character 0*/
} WsmHiMibMacAddresses_t;

typedef struct __attribute__((__packed__)) wsm_hi_mib_mac_addr_s {
        u8       MacAddr[WSM_API_MAC_ADDR_SIZE];   /*mac address character 0*/
} WsmHiMibMacAddr_t;

typedef struct __attribute__((__packed__)) wsm_hi_mib_grp_addr_table_s {
        __le32   Enable;                           /*Address filtering configuration type: wsm_enable*/
        __le32   NumOfAddresses;                   /*Number of addresses. A zero value clears the address table.*/
        WsmHiMibMacAddr_t AddressList[WSM_API_ADDRESS_LIST_SIZE];   /*Mac address 0 type: wsm_hi_mib_mac_addr*/
} WsmHiMibGrpAddrTable_t;

typedef struct __attribute__((__packed__)) wsm_hi_mib_wep_default_key_id_s {
        u8       WepDefaultKeyId;                  /*Range of 0 to 3.*/
        u8       Reserved[WSM_API_RESERVED_SIZE_3];   /*Reserved 0*/    
} WsmHiMibWepDefaultKeyId_t;

typedef struct __attribute__((__packed__)) wsm_hi_mib_arp_ip_addr_table_s {
        u8       ArpFilter : 1;                    /*Bit 0 = 1 - Enable ARP filtering*/
        u8       ArpReply : 1;                     /*Bit 1 = 1 - Enable ARP reply*/
        u8       Reserved : 6;                     /*Reserved*/      
        u8       Reserved2[WSM_API_RESERVED2_SIZE];   /*Reserved2 0*/   
        u8       Ipv4Address[WSM_API_IPV4_ADDRESS_SIZE];   /*The IP V4 address 0*/
} WsmHiMibArpIpAddrTable_t;

typedef struct __attribute__((__packed__)) wsm_hi_mib_template_frame_s {
        u8       FrameType;                        /*Frame type type: wsm_tmplt*/
        u8       InitRate : 7;                     /*Bits 6 to 0 - Defines the initial transmission rate.*/
        u8       Mode : 1;                         /*Bit 7 - Indicates the mode to use for 11n frames. 0 - Mixed ; 1 - Greenfield*/
        __le16   FrameLength;                      /*The length of the frame in bytes. Measured from the first byte of the frame header to the last byte of the frame body (if any). The length is excluding the possible padding.*/
        u8       Frame[WSM_API_FRAME_SIZE];        /*Frame (maximum of 1024 bytes)*/
} WsmHiMibTemplateFrame_t;

typedef struct __attribute__((__packed__)) wsm_hi_mib_bcn_filter_table_s {
        __le32   NumOfInfoElmts;                   /*Number of information elements. Value of 0 clears the table.*/
        WsmHiIeTableEntry_t IeTable[WSM_API_IE_TABLE_SIZE];   /*IE-Table details. type: wsm_hi_ie_table_entry*/
} WsmHiMibBcnFilterTable_t;

typedef struct __attribute__((__packed__)) wsm_hi_mib_bcn_filter_enable_s {
        __le32   Enable;                           /* type: wsm_beacon_filter*/
        __le32   BcnCount;                         /*The value of received beacons for which the device wakes up the host.*/
} WsmHiMibBcnFilterEnable_t;

typedef struct __attribute__((__packed__)) wsm_hi_mib_beacon_wake_up_period_s {
        u8       WakeupPeriodMin;                  /*0 - Reserved. 1 to 255 - The minimum number of beacon periods the device will doze before waking up to receive a beacon. Recommended value : DTIM Period.*/
        u8       ReceiveDTIM;                      /*0 - Device will wake up according to NumBeaconPeriods and ListenInterval values.            1 - Device will wake up for every DTIM frame. NumBeaconPeriods is ignored.*/
        __le16   WakeupPeriodMax;                  /*0 - Reserved. 1 to 255 - The maximum number of beacon periods the device will doze before waking up to receive a beacon. Recommended value : Listen Interval.*/
} WsmHiMibBeaconWakeUpPeriod_t;

typedef struct __attribute__((__packed__)) wsm_hi_mib_rcpi_rssi_threshold_s {
        u8       Detection : 1;                    /*Bit 0 = 0 - Disable threshold detection (default). 1 - Enable threshold detection*/
        u8       Use : 1;                          /*Bit 1 = 0 - Use RCPI (default). 1 - Use RSSI*/
        u8       Upperthresh : 1;                  /*Bit 2 = 0 - Use UpperThreshold (default). 1 - Do not use UpperThreshold*/
        u8       Lowerthresh : 1;                  /*Bit 3 = 0 - Use LowerThreshold (default). 1 - Do not use LowerThreshold*/
        u8       Reserved : 4;                     /*Reserved, set to 0*/
        u8       LowerThreshold;                   /*The lower RCPI or RSSI threshold value.*/
        u8       UpperThreshold;                   /*The upper RCPI or RSSI threshold value.*/
        u8       RollingAverageCount;              /*Number of samples to use in a rolling average valid values 1 to 16.*/
} WsmHiMibRcpiRssiThreshold_t;

typedef struct __attribute__((__packed__)) wsm_hi_mib_stats_table_s {
        __le16   LatestSnr;                        /*The latest SNR value.*/
        u8       LatestRcpi;                       /*The latest RCPI value.*/
        s8       LatestRssi;                       /*The latest RSSI value.*/
} WsmHiMibStatsTable_t;

typedef struct __attribute__((__packed__)) wsm_hi_mib_count_table_s {
        __le32   CountPlcpErrors;                  /*Frames received with PLCP header errors detected.*/
        __le32   CountFcsErrors;                   /*Frames received with FCS errors.*/
        __le32   CountTxPackets;                   /*Frames transmitted, including automatic responses.*/
        __le32   CountRxPackets;                   /*Frames received with good FCS in the Rx buffer.*/
        __le32   CountRxPacketErrors;              /*Frames received with incorrect FCS or PLCP error.*/
        __le32   CountRxDecryptionFailures;        /*Frames received that failed decryption (AES MIC).*/
        __le32   CountRxMicFailures;               /*Frames received that failed the TKIP MIC check.*/
        __le32   CountRxNoKeyFailures;             /*Frames received encrypted but with no matching key in the key table.*/
        __le32   CountTxMulticastFrames;           /*Frames transmitted to multi-cast address.*/
        __le32   CountTxFramesSuccess;             /*Frames from host successfully transmitted.*/
        __le32   CountTxFrameFailures;             /*Frames from host that failed to transmit.*/
        __le32   CountTxFramesRetried;             /*Frames transmitted after retry attempts.*/
        __le32   CountTxFramesMultiRetried;        /*Frames transmitted after multiple retry attempts.*/
        __le32   CountRxFrameDuplicates;           /*Frames received but discarded as a duplicate.*/
        __le32   CountRtsSuccess;                  /*RTS frames transmitted successfully.*/
        __le32   CountRtsFailures;                 /*RTS frames transmitted that did not receive a CTS.*/
        __le32   CountAckFailures;                 /*Frame transmit attempts not receiving ACK.*/
        __le32   CountRxMulticastFrames;           /*Frames received with multicast receive address.*/
        __le32   CountRxFramesSuccess;             /*Frames received by device without error.*/
        __le32   CountRxCMACICVErrors;             /*MMPDUs discarded by CMAC integrity check algorithm.*/
        __le32   CountRxCMACReplays;               /*MMPDUs discarded by CMAC replay detector.*/
        __le32   CountRxMgmtCCMPReplays;           /*Robust MMPDUs discarded by CCMP replay detector.*/
        __le32   CountRxBIPMICErrors;              /*Robust MMPDUs discarded by CCMP replay detector.*/
} WsmHiMibCountTable_t;

typedef struct __attribute__((__packed__)) wsm_hi_mib_block_ack_policy_s {
        u8       BlockAckTxTidPolicy;              /*When enabled, the WLAN device firmware can attempt to establish a block ACK agreement for that TID in the transmit direction.            Bits 7 to 0 correspond to TIDs 7 to 0, respectively. Bit value = 0 - Block ACK disabled ; = 1 - Block ACK enabled*/
        u8       Reserved1;                        /*Reserved*/      
        u8       BlockAckRxTidPolicy;              /*When enabled, the WLAN device firmware will, where possible, accept requests to establish a block ACK agreement for that TID in the receive direction.            Bits 7 to 0 correspond to TIDs 7 to 0, respectively. Bit value = 0 - Block ACK requests disable ; = 1 - Block ACK requests accepted subject to availability.*/
        u8       Reserved2;                        /*Reserved*/      
} WsmHiMibBlockAckPolicy_t;

typedef struct __attribute__((__packed__)) wsm_hi_mib_override_int_rate_s {
        u8       InternalTxRate;                   /*Value = 0xFF (default). The device uses the lowest basic rate.             If NonErpProtection (see Section 4.9) is enabled, then the device will instead use the lowest mandatory rate of 1 Mbit/s (long preamble).             Value = 0 to 21. This value will override the default value of the device as specified above. (See Section 2.8.)*/
        u8       NonErpInternalTxRate;             /*If the InternalTxRate field is not set to 0xFF, this field specifies the higher internal Tx rate when non-ERP-protection (see Section 4.9) is applied.            The rate adaptation mechanism described above will also be applied.*/
        u8       Reserved[WSM_API_RESERVED_SIZE_2];   /*Reserved 0*/    
} WsmHiMibOverrideIntRate_t;

typedef struct __attribute__((__packed__)) wsm_hi_mib_set_association_mode_s {
        u8       PreambtypeUse : 1;                /*Bit 0 = 1 use PreambleType*/
        u8       Mode : 1;                         /*Bit 1 = 1 use MixedOrGreenfieldMode*/
        u8       Rateset : 1;                      /*Bit 2 = 1 use BasicRateSet*/
        u8       Spacing : 1;                      /*Bit 3 = 1 use MPDU start spacing*/
        u8       Snoop : 1;                        /*Bit 4 = 1 snoop (re)association frames for AID and U-APSD information*/
        u8       Reserved : 3;                     /*Reserved, set to 0*/
        u8       PreambleType;                     /*Specifies the PLCP preamble type used type: wsm_preamble*/
        u8       MixedOrGreenfieldType;            /*Specifies the 11n mode to be used by template frames (where applicable). Values are defined as follows: 0 - Mixed mode ; 1 - Greenfield mode*/
        u8       MpduStartSpacing;                 /*Defined according to IEEE 802.11 standard [1] Table 7-43k. The minimum MPDU start spacing subfield of A-MPDU parameters is as follows : type: wsm_mpdu_start_spacing*/
        __le32   BasicRateSet;                     /*Contains the BasicRateSet to be used.*/
} WsmHiMibSetAssociationMode_t;

typedef struct __attribute__((__packed__)) wsm_hi_mib_update_epta_config_data_s {
        __le32   EnablePta;                        /*0 - Disable (e)PTA. 1 - Enable (e)PTA. >=2 - Reserved*/
        __le32   BluetoothQuality;                 /*This parameter sets the required Bluetooth quality that must be maintained. type: wsm_bluetooth_quality*/
        __le32   SubscribeBtEvent;                 /*0 - Unsubscribe from Bluetooth event indication. 1 - Subscribe to Bluetooth event indication. >=2 - Reserved*/
        __le32   PtaDebugCommand;                  /*To be defined*/ 
} WsmHiMibUpdateEptaConfigData_t;

typedef struct __attribute__((__packed__)) wsm_hi_mib_set_uapsd_information_s {
        u8       TrigBckgrnd : 1;                  /*Bit 0 = 1 Trigger enable for background AC*/
        u8       TrigBe : 1;                       /*Bit 1 = 1 Trigger enable for best effort AC*/
        u8       TrigVideo : 1;                    /*Bit 2 = 1 Trigger enable for video AC*/
        u8       TrigVoice : 1;                    /*Bit 3 = 1 Trigger enable for voice AC*/
        u8       PseudoUapsd : 1;                  /*Bit 4 = 0 - Disable pseudo U-APSD operation; = 1 - Enable pseudo U-APSD operation*/
        u8       NotAppendPspoll : 1;              /*Bit 5 = 1 - Do not append PS-Poll to a host queued data frame in the pseudo U-APSD operation.*/
        u8       Reserved : 2;                     /*Reserved, set to 0.*/
        u8       DelivBckgrnd : 1;                 /*Bit 8 = 1 Delivery enable for background AC*/
        u8       DelivBe : 1;                      /*Bit 9 = 1 Delivery enable for best effort AC*/
        u8       DelivVideo : 1;                   /*Bit 10 = 1 Delivery enable for video AC*/
        u8       DelivVoice : 1;                   /*Bit 11 = 1 Delivery enable for voice AC*/
        u8       Reserved2 : 4;                    /*Reserved2, set to 0*/
        __le16   MinAutoTriggerInterval;           /*The minimum auto-trigger interval in milliseconds. If the interval is specified as 0, then the auto-trigger feature is disabled. */
        __le16   MaxAutoTriggerInterval;           /*The maximum auto-trigger interval in milliseconds.*/
        __le16   AutoTriggerStep;                  /*The stepping in milliseconds to adjust the auto-trigger interval from minimum to maximum or from maximum to minimum.*/
} WsmHiMibSetUapsdInformation_t;

typedef struct __attribute__((__packed__)) wsm_hi_mib_set_tx_rate_retry_policy_s {
        u8       NumTxRatePolicy;                  /*The number of transmit rate policies being sent in this message.*/
        u8       Reserved[WSM_API_RESERVED_SIZE_3];   /*Reserved 0*/    
        WsmHiMibTxRateRetryPolicy_t TxRateRetryPolicy;     /*The number of transmit rate policies being sent in this message.*/
} WsmHiMibSetTxRateRetryPolicy_t;

typedef struct __attribute__((__packed__)) wsm_hi_mib_set_host_msg_type_filter_s {
        __le16   FrameCtrlFilterMask;              /*The mask to be applied to the frame control field of the receive indication frame.*/
        __le16   FrameCtrlFilterValue;             /*The value to be compared to the masked frame control field value.             If the values match, then a message type of 1 is passed to the host with the Rx indication message, otherwise, a value of 0 applies.*/
} WsmHiMibSetHostMsgTypeFilter_t;

typedef struct __attribute__((__packed__)) wsm_hi_mib_p2p_find_info_s {
        u8       Band;                             /*Band*/          
        u8       Reserved;                         /*Reserved*/      
        __le16   ListenChannel;                    /*The channel on which the P2P device should perform listen procedures.*/
        u8       P2PMinDiscoverableTime;           /*The minimum time [in units of 100TU s] to be spent on a given channel during the listen state.*/
        u8       P2PMaxDiscoverableTime;           /*The maximum time [in units of 100TU s] to be spent on a given channel during the listen state.*/
        u8       MaxTransmitRate;                  /*The maximum rate at which probe request should be transmitted.*/
        u8       ProbeDelay;                       /*Delay before transmitting a probe frame.*/
        __le16   FindTimeOut;                      /*The total time (in units of 100TU s) that device should perform P2P find procedures. The maximum timeout that can be set is 0xFFFE. The value 0xFFFF indicates no timeout.*/
        u8       NumProbs;                         /*Number of probe requests to be transmitted on each channel during the search phase.*/
        u8       NumChannels;                      /*Number of channels to be searched.*/
        /* WsmHiChannelDef_t SocialChannels;      */   /*Find the definition of type channels as part of Start-Scan API. type: wsm_hi_channel_def*/
} WsmHiMibP2PFindInfo_t;

typedef struct __attribute__((__packed__)) wsm_hi_mib_p2p_ps_mode_info_s {
        u8       CtWin : 7;                        /*Bits 0 to 6: - CTWindow in units of TU*/
        u8       Opportunistic : 1;                /*Bit 7: 1 -> Opportunistic PS mode enable ; 0 -> Opportunistic PS mode disable*/
        u8       Count;                            /*Indicates the number of absent intervals. 0 - Do not use NoA or cancel existing schedule. 255 - Continues schedule*/
        u8       Reserved;                         /*Reserved for Write operation. Read Operation will provide NoAIndex at the point of read operation.*/
        u8       DtimCount;                        /*Number of DTIM intervals to wait before starting the NoA Schedule*/
        __le32   Duration;                         /*Maximum duration in microseconds, the P2P GO can remain absent following the start of a NoA interval.*/
        __le32   Interval;                         /*Length of NoA interval in microseconds*/
        __le32   StartTime;                        /*GO: Time offset in microseconds to the start of the NoA schedule. This is the time offset from the last DTIM beacon before NoA schedule starts.            Client: The start time for the schedule expressed in terms of the lower 4 bytes of the TSF timer.*/
} WsmHiMibP2PPsModeInfo_t;

typedef struct __attribute__((__packed__)) wsm_hi_mib_ether_type_data_frame_filter_set_s {
        u8       NrFilters;                        /*The number of filters defined by the host. A maximum of four filters is supported. (WSM_MAX_FILTER_ELEMENTS).*/
        u8       Reserved[WSM_API_RESERVED_SIZE_3];   /*Reserved 0*/    
        WsmHiMibEthertypeDataFrameFilter_t EtherTypeFilter[WSM_API_ETHER_TYPE_FILTER_SIZE];   /*List of ether type filter*/
} WsmHiMibEtherTypeDataFrameFilterSet_t;

typedef struct __attribute__((__packed__)) wsm_hi_mib_udp_port_data_frame_filter_set_s {
        u8       NrFilters;                        /*The number of filters defined by the host. A maximum of four filters is supported. (WSM_MAX_FILTER_ELEMENTS).*/
        u8       Reserved[WSM_API_RESERVED_SIZE_3];   /*Reserved 0*/    
        WsmHiMibUdpportsDataFrameFilter_t UdpPortsFilter[WSM_API_UDP_PORTS_FILTER_SIZE];   /*List of UDP Port filters*/
} WsmHiMibUdpPortDataFrameFilterSet_t;

typedef struct __attribute__((__packed__)) wsm_hi_mib_magic_data_frame_filter_s {
        u8       FilterMode;                       /*Selects the filter mode type: wsm_filter_mode*/
        u8       Offset;                           /*Offset in bytes from the end of the 802.11 header.*/
        u8       MagicPatternLength;               /*The length of the magic pattern. A maximum length of 32 bytes (WSM_MAX_MAGIC_PATTERN_LENGTH) is supported.*/
        u8       Reserved;                         /*Reserved*/      
        u8       MagicPattern[WSM_API_MAGIC_PATTERN_SIZE];   /*The magic byte pattern to match 0*/
} WsmHiMibMagicDataFrameFilter_t;

typedef struct __attribute__((__packed__)) wsm_hi_mib_block_ack_info_s {
        u8       BufferSize;         
        u8       MaxNumAgreements;   
        u8       Reserved[WSM_API_RESERVED_SIZE_2];   /*Reserved 0*/    
} WsmHiMibBlockAckInfo_t;

typedef struct __attribute__((__packed__)) wsm_hi_mib_keep_alive_period_s {
        __le16   KeepAlivePeriod;                  /*The period in seconds to send keep-alive frames to the AP if the device is idle.            The default keep-alive period is 150 seconds. Set this field to zero to disable the keep-alive feature.            The keep-alive frames may be synchronized to beacon receiving depending on the mode that the device is operating.*/
        u8       Reserved[WSM_API_RESERVED_SIZE_2];   /*Reserved 0*/    
} WsmHiMibKeepAlivePeriod_t;

typedef struct __attribute__((__packed__)) wsm_hi_mib_disable_bssid_filter_s {
        u8       Filter;                           /*0: enable BSSID filtering. this is the default value. 1: disable BSSID filtering.*/
        u8       Reserved[WSM_API_RESERVED_SIZE_3];   /*Reserved 0*/    
} WsmHiMibDisableBssidFilter_t;

typedef struct __attribute__((__packed__)) wsm_hi_mib_arp_keep_alive_period_s {
        __le16   ArpKeepAlivePeriod;               /*In seconds. 0 - no ARP keep alive*/
        u8       EncrType;                         /* type: wsm_key_type*/
        u8       Reserved;                         /*To ensure consistent byte padding.*/
        u8       SenderIpv4Address[WSM_API_SENDER_IPV4_ADDRESS_SIZE];   /*IP address of sender 0*/
        u8       TargetIpv4Address[WSM_API_TARGET_IPV4_ADDRESS_SIZE];   /*IP address of target 0*/
} WsmHiMibArpKeepAlivePeriod_t;

typedef struct __attribute__((__packed__)) wsm_hi_mib_pseudo_rate_s {
        __les16  PseudoRatePowerStep;              /*TX Power Step in Q4.4 format (4 decimal places).*/
        u8       PseudoRateReference;              /*The reference rate that will be used to build the power table. This is normally the highest rate that will be employed and should be common to all peers.*/
        u8       Reserved;                         /*Reserved*/      
} WsmHiMibPseudoRate_t;

typedef struct __attribute__((__packed__)) wsm_hi_mib_mac_address_data_frame_filter_set_s {
        u8       NrFilters;                        /*The number of filters defined in the message by the host. A maximum of eight filters is supported.*/
        u8       ActionMode;                       /*General Enable/Disable flag for all MAC addresses. 0 - Disable MAC address filtering. 1 - Enable MAC address filtering*/
        u8       Reserved[WSM_API_RESERVED_SIZE_2];   /*To ensure consistent byte padding. 0*/
        WsmHiMibMacAddressDataFrameFilter_t MacAddressFilter[WSM_API_MAC_ADDRESS_FILTER_SIZE];   /*Mac Address filter definition*/
} WsmHiMibMacAddressDataFrameFilterSet_t;

typedef struct __attribute__((__packed__)) wsm_hi_mib_ipv4_address_data_frame_filter_set_s {
        u8       NrFilters;                        /*The number of filters defined in the message by the host. A maximum of eight filters is supported.*/
        u8       ActionMode;                       /*0 - Disabled IPv4 Address filtering. 1 - Enabled IPV4 Address filtering*/
        u8       Reserved[WSM_API_RESERVED_SIZE_2];   /*To ensure consistent byte padding 0*/
        WsmHiMibIpv4AddressDataFrameFilter_t IPv4AddressFilter[WSM_API_I_PV4_ADDRESS_FILTER_SIZE];   /*IPv4 Address filter definition*/
} WsmHiMibIpv4AddressDataFrameFilterSet_t;

typedef struct __attribute__((__packed__)) wsm_hi_mib_ipv6_address_data_frame_filter_set_s {
        u8       NrFilters;                        /*The number of filters defined in the message by the host. A maximum of eight filters is supported.*/
        u8       ActionMode;                       /*0 - Disabled IPv6 Address filtering. 1 - Enabled IPV6 Address filtering*/
        u8       Reserved[WSM_API_RESERVED_SIZE_2];   /*To ensure consistent byte padding 0*/
        WsmHiMibIpv6AddressDataFrameFilter_t IPv6AddressFilter[WSM_API_I_PV6_ADDRESS_FILTER_SIZE];   /*IPv6 Address filter definition*/
} WsmHiMibIpv6AddressDataFrameFilterSet_t;

typedef struct __attribute__((__packed__)) wsm_hi_mib_forwarding_offload_set_s {
        u8       FwEnable;           
        u8       FwOffloadFlags;     
        u8       Reserved[WSM_API_RESERVED_SIZE_2];   /*Reserved 0*/    
} WsmHiMibForwardingOffloadSet_t;

typedef struct __attribute__((__packed__)) wsm_hi_mib_ns_ip_addr_table_s {
        __le32   Enable;             
        u8       Ipv6Address[WSM_API_IPV6_ADDRESS_SIZE];
} WsmHiMibNsIpAddrTable_t;

typedef struct __attribute__((__packed__)) wsm_hi_mib_inactivity_timer_s {
        u8       MinActiveTime;                    /*number of seconds of inactivity allowed until TIM polling is started*/
        u8       MaxActiveTime;                    /*number of seconds until WSM_EVENT_IND_INACTIVITY event if the AP STA does not react to TIM polling*/
        __le16   Reserved;                         /*Reserved*/      
} WsmHiMibInactivityTimer_t;

/**************************************************/

typedef union filter_condition_u {
        u8                                            asValue[WSM_API_ASVALUE_SIZE];   /* Element :0*/   
        WsmHiFilterConditionMask_t                    asMask;                         /* Element :1*/   
} FilterCondition_t;

typedef union wsm_event_data_u {
        __le32                                        ErrorStatus;                    /* Element :0*/   
        u8                                            RcpiRssi;                       /* Element :4*/   
        __le32                                        Bt_Inactive;                    /* Element :5*/   
        __le32                                        BtActive;                       /* Element :6*/   
        __le32                                        P_S_Mode_Error;                 /* Element :7*/   
        __le32                                        P_A_S_Event;                    /* Element :8*/   
} WsmEventData_t;

typedef union wsm_hi_debug_ind__debug_data_u {
        WsmHiDebugIndEptaRtStats_t                    EptaRtStats;                    /* Element :0*/   
        WsmHiDebugIndEptaNrtStats_t                   EptaNrtStats;                   /* Element :1*/   
        __le32                                        RawData[WSM_API_RAWDATA_SIZE];   /* Element :2*/   
} WsmHiDebugIndDebugData_t;

typedef union wsm_hi_meas_report_u {
        WsmHiMeasChannelLoadResults_t                 ChannelLoadResults;             /* Element :0*/   
        WsmHiMeasNoiseHistogramResults_t              NoiseHistogramResults;          /* Element :1*/   
        WsmHiMeasBeaconResults_t                      BeaconResults;                  /* Element :2*/   
        WsmHiMeasStaStatsResults_t                    StaStatsResults;                /* Element :3*/   
        WsmHiMeasLinkMeasurementResults_t             LinkMeasurementResults;         /* Element :4*/   
} WsmHiMeasReport_t;

typedef union wsm_hi_meas_request_u {
        WsmHiMeasChannelLoadParams_t                  ChannelLoadParams;              /* Element :0*/   
        WsmHiMeasNoiseHistogramParams_t               NoisHistogramParams;            /* Element :1*/   
        WsmHiMeasBeaconParams_t                       BeaconParams;                   /* Element :2*/   
        WsmHiMeasStaStatsParams_t                     StaStatsParams;                 /* Element :3*/   
        WsmHiMeasLinkMeasurementParams_t              LinkMeasurementParams;          /* Element :4*/   
} WsmHiMeasRequest_t;

typedef union wsm_mib_data_u {
        WsmHiMibMacAddresses_t                        dot11MacAdresses;               /* Element :0*/   
        __le32                                        dot11MaxTransmitMsduLifeTime;   /* Element :1*/   
        __le32                                        dot11MaxReceiveLifeTime;        /* Element :2*/   
        __le32                                        dot11SlotTime;                  /* Element :3*/   
        WsmHiMibGrpAddrTable_t                        dot11GroupAddressesTable;       /* Element :4*/   
        WsmHiMibWepDefaultKeyId_t                     dot11WepdefaultKeyId;           /* Element :5*/   
        __les32                                       dot11CurrentTxPowerLevel;       /* Element :6*/   
        __le32                                        dot11RtsThreshold;              /* Element :7*/   
        __le32                                        useCtsToSelf;                   /* Element :4096*/
        WsmHiMibArpIpAddrTable_t                      ArpIpAddressesTable;            /* Element :4097*/
        WsmHiMibTemplateFrame_t                       TemplateFrame;                  /* Element :4098*/
        __le32                                        RxFilter;                       /* Element :4099*/
        WsmHiMibBcnFilterTable_t                      BeaconFilterTable;              /* Element :4100*/
        WsmHiMibBcnFilterEnable_t                     BeaconFilterEnable;             /* Element :4101*/
        __le32                                        OperationalPowerMode;           /* Element :4102*/
        WsmHiMibBeaconWakeUpPeriod_t                  BeaconWakeUpPeriod;             /* Element :4103*/
        WsmHiMibRcpiRssiThreshold_t                   RcpiRssiThreshold;              /* Element :4105*/
        WsmHiMibStatsTable_t                          StatisticsTable;                /* Element :4106*/
        __le32                                        IbssPsConfig;                   /* Element :4107*/
        WsmHiMibCountTable_t                          CountTable;                     /* Element :4108*/
        WsmHiMibBlockAckPolicy_t                      BlockAckPolicy;                 /* Element :4110*/
        WsmHiMibOverrideIntRate_t                     MibOverrideInternalTxRate;      /* Element :4111*/
        WsmHiMibSetAssociationMode_t                  SetAssociationMode;             /* Element :4112*/
        WsmHiMibUpdateEptaConfigData_t                UpdateEptaConfigData;           /* Element :4113*/
        __le32                                        SelectCcaMethod;                /* Element :4114*/
        WsmHiMibSetUapsdInformation_t                 SetUapsdInformation;            /* Element :4115*/
        __le32                                        SetAutoCalibrationMode;         /* Element :4117*/
        WsmHiMibSetTxRateRetryPolicy_t                SetTxRateRetryPolicy;           /* Element :4118*/
        WsmHiMibSetHostMsgTypeFilter_t                SetHostMessagetypeFilter;       /* Element :4119*/
        WsmHiMibP2PFindInfo_t                         P2PFindInfo;                    /* Element :4120*/
        WsmHiMibP2PPsModeInfo_t                       P2PPsModeInfo;                  /* Element :4121*/
        WsmHiMibEtherTypeDataFrameFilterSet_t         SetEtherTypeDataFrameFilter;    /* Element :4122*/
        WsmHiMibUdpPortDataFrameFilterSet_t           SetUdpPortsDataFrameFilter;     /* Element :4123*/
        WsmHiMibMagicDataFrameFilter_t                SetMagicDataFrameFilter;        /* Element :4124*/
        __le32                                        ProtectedMgmtFramesPolicy;      /* Element :4128*/
        __le32                                        SetHtProtection;                /* Element :4129*/
        __le32                                        UseMultiTxConfMsg;              /* Element :4132*/
        WsmHiMibKeepAlivePeriod_t                     KeepAlivePeriod;                /* Element :4133*/
        WsmHiMibDisableBssidFilter_t                  bssid_filter;                   /* Element :4134*/
        WsmHiMibBlockAckInfo_t                        MibBlockAckInfo;                /* Element :4109*/
        WsmHiMibArpKeepAlivePeriod_t                  ArpKeepAlivePeriod;             /* Element :4136*/
        WsmHiMibPseudoRate_t                          PseudoRateInfo;                 /* Element :4137*/
        WsmHiMibMacAddressDataFrameFilterSet_t        MacAddressFilterInfo;           /* Element :4144*/
        WsmHiMibIpv4AddressDataFrameFilterSet_t       IPv4AddressFilterInfo;          /* Element :4145*/
        WsmHiMibIpv6AddressDataFrameFilterSet_t       IPv6AddressFilterInfo;          /* Element :4146*/
        WsmHiMibForwardingOffloadSet_t                ForwardingOffload;              /* Element :4147*/
        WsmHiMibNsIpAddrTable_t                       NsIpAddressesTable;             /* Element :4148*/
        WsmHiMibInactivityTimer_t                     InactivityTimer;                /* Element :4149*/
} WsmMibData_t;

typedef union wsm_privacy_key_data_u {
        WsmHiWepPairwiseKey_t                         WepPairwiseKey;                 /* Element :0*/   
        WsmHiWepGroupKey_t                            WepGroupKey;                    /* Element :1*/   
        WsmHiTkipPairwiseKey_t                        TkipPairwiseKey;                /* Element :2*/   
        WsmHiTkipGroupKey_t                           TkipGroupKey;                   /* Element :3*/   
        WsmHiAesPairwiseKey_t                         AesPairwiseKey;                 /* Element :4*/   
        WsmHiAesGroupKey_t                            AesGroupKey;                    /* Element :5*/   
        WsmHiWapiPairwiseKey_t                        WapiPairwiseKey;                /* Element :6*/   
        WsmHiWapiGroupKey_t                           WapiGroupKey;                   /* Element :7*/   
        WsmHiIgtkGroupKey_t                           IgtkGroupKey;                   /* Element :8*/   
} WsmPrivacyKeyData_t;

/**************************************************/

/**************************************************/

#ifndef DEF_HDR_MSG
#define DEF_HDR_MSG

typedef struct __attribute__((__packed__)) HiMsgHdr_s {
        __le16    MsgLen;
        union 
        {
            __le16    U16MsgInfo;
            struct 
            {
                u8     MsgId;
                u8     MsgInfo;
            } t;
            struct 
            {
                u8     Id : 6;
                u8     ULMac : 1;
                u8     MesgType : 1;
                u8     Reserved : 1;
                u8     IntId : 2;
                u8     HostCount : 3;
                u8     SecLink : 2;
            } b;
        } s;
} HiMsgHdr_t ;

#endif

/**************************************************/

#ifndef HI_GENERIC_API
#define HI_GENERIC_API

/* request HI_CONTROL_GPIO */
/* Send a request to read and write a gpio */
typedef struct __attribute__((__packed__)) HiControlGpioReqBody_s {
        u8       GpioLabel;                        /*Identify the gpio by its label*/
        u8       GpioMode;                         /*define how to set or read the gpio*/
} HiControlGpioReqBody_t;

typedef struct __attribute__((__packed__)) HiControlGpioReq_s {
        HiMsgHdr_t Header;             
        HiControlGpioReqBody_t Body;               
} HiControlGpioReq_t;

/* confirmation HI_CONTROL_GPIO */
/* Send a request to read and write a gpio */
typedef struct __attribute__((__packed__)) HiControlGpioCnfBody_s {
        u8       Status;                           /*A value of zero indicates the request is completed successfully.*/
        u8       Value;                            /*the value of the gpio or the error*/
} HiControlGpioCnfBody_t;

typedef struct __attribute__((__packed__)) HiControlGpioCnf_s {
        HiMsgHdr_t Header;             
        HiControlGpioCnfBody_t Body;               
} HiControlGpioCnf_t;

/* request HI_SHUT_DOWN */
/* Send a request to shut down the internal power supplies */
typedef HiMsgHdr_t HiShutDownReq_t; 

/* indication HI_EXCEPTION */
/* Send an exception */
typedef struct __attribute__((__packed__)) HiExceptionIndBody_s {
        __le32   Reason;             
        __le32   Reserved_0;         
        __le32   Reserved_1;         
        __le32   Reserved_2;         
        __le32   Reserved_3;         
        __le32   Reserved_4;         
        __le32   Reserved_5;         
        __le32   Reserved_6;         
        __le32   Reserved_7;         
        __le32   Reserved_8;         
        __le32   Reserved_9;         
        __le32   Reserved_10;        
        __le32   Reserved_11;        
        __le32   Reserved_12;        
        __le32   Reserved_13;        
        __le32   Lr;                               /*ARM register lr.*/
        __le32   Pc;                               /*ARM register pc.*/
        __le32   Reserved_14;        
        __le32   Reserved_15;        
        u8       Reserved_16[48];    
} HiExceptionIndBody_t;

typedef struct __attribute__((__packed__)) HiExceptionInd_s {
        HiMsgHdr_t Header;             
        HiExceptionIndBody_t Body;               
} HiExceptionInd_t;

/* indication HI_ERROR_IND */
/* Send an Error indication to the Host */
typedef struct __attribute__((__packed__)) HiErrorIndBody_s {
        __le32   Type;               
        u8       Data[API_DATA_SIZE_124];          /*Generic data buffer - contents depends on the error type.*/
} HiErrorIndBody_t;

typedef struct __attribute__((__packed__)) HiErrorInd_s {
        HiMsgHdr_t Header;             
        HiErrorIndBody_t Body;               
} HiErrorInd_t;

/* indication HI_STARTUP */
/* Send an indication during startup */
typedef struct __attribute__((__packed__)) HiStartupIndBody_s {
        __le32   Status;                           /*Initialization status. same as all indication and confirmation msg*/
        __le16   HardwareId;                       /*=misc_read_reg7 register*/
        u8       OPN[API_OPN_SIZE];                /*=OTP part_OPN*/ 
        u8       UID[API_UID_SIZE];                /*=OTP UID*/      
        __le16   NumInpChBufs;                     /*Number of buffers in the input channel 0.*/
        __le16   SizeInpChBuf;                     /*Buffer size in bytes for the input channel 0.*/
        u8       NumLinksAP;                       /*number of STA that we support in AP mode (currently 16-2)*/
        u8       NumInterfaces;                    /*number of interfaces free to use by the customer (currently 3-1)*/
        u8       MacAddr0[API_MAC_ADDR0_SIZE];     /*1st MAC address derived from OTP*/
        u8       MacAddr1[API_MAC_ADDR1_SIZE];     /*2d MAC address derived from OTP*/
        u8       ApiVersion;         
        u8       Reserved;           
        HiCapabilities_t Capabilities;       
        u8       FirmwareBuild;      
        u8       FirmwareMinor;      
        u8       FirmwareMajor;      
        u8       FirmwareType;                     /*ETF, WFM, WSM*/ 
        u8       DisabledChannelList[API_DISABLED_CHANNEL_LIST_SIZE];   /*=OTP Disabled channel list info*/
        u8       Reserved2[API_RESERVED2_SIZE];
        u8       FirmwareLabel[API_FIRMWARE_LABEL_SIZE];   /*Null terminated text string.*/
} HiStartupIndBody_t;

typedef struct __attribute__((__packed__)) HiStartupInd_s {
        HiMsgHdr_t Header;             
        HiStartupIndBody_t Body;               
} HiStartupInd_t;

/* indication HI_GENERIC_IND */
/* Send a generic indication */
typedef struct __attribute__((__packed__)) HiGenericIndBody_s {
        __le32   IndicationId;                     /*Identify the indication data.*/
        HiIndicationData_t IndicationData;         /*Indication data.*/
} HiGenericIndBody_t;

typedef struct __attribute__((__packed__)) HiGenericInd_s {
        HiMsgHdr_t Header;             
        HiGenericIndBody_t Body;               
} HiGenericInd_t;

/* request HI_CONFIGURATION */
/* Configure the device and set MAC parameters */
typedef struct __attribute__((__packed__)) HiConfigurationReqBody_s {
        __le16   Length;                           /*PdsData length in bytes*/
        u8       PdsData[API_PDS_DATA_SIZE];       /*PDS data*/      
} HiConfigurationReqBody_t;

typedef struct __attribute__((__packed__)) HiConfigurationReq_s {
        HiMsgHdr_t Header;             
        HiConfigurationReqBody_t Body;               
} HiConfigurationReq_t;

/* confirmation HI_CONFIGURATION */
/* Configure the device and set MAC parameters */
typedef struct __attribute__((__packed__)) HiConfigurationCnfBody_s {
        __le32   Status;                           /*Status. The following data is only valid if the confirmation returns STATUS_SUCCESS.*/
        __le32   SupportedRateMask;                /*This indicates which rates are supported by the PHY. Bits are defined according to rate definition in Section 2.8.*/
        __les32  Reserved_0;         
        __les32  Reserved_1;         
        __le32   Reserved_2;         
} HiConfigurationCnfBody_t;

typedef struct __attribute__((__packed__)) HiConfigurationCnf_s {
        HiMsgHdr_t Header;             
        HiConfigurationCnfBody_t Body;               
} HiConfigurationCnf_t;

/* request HI_SET_SL_MAC_KEY */
/* Set the Secure Link MAC key */
typedef struct __attribute__((__packed__)) HiSetSlMacKeyReqBody_s {
        u8       OtpOrRam;                         /*Key destination - OTP or RAM*/
        u8       KeyValue[API_KEY_VALUE_SIZE];     /*Secure Link MAC Key value*/
} HiSetSlMacKeyReqBody_t;

typedef struct __attribute__((__packed__)) HiSetSlMacKeyReq_s {
        HiMsgHdr_t Header;             
        HiSetSlMacKeyReqBody_t Body;               
} HiSetSlMacKeyReq_t;

/* confirmation HI_SET_SL_MAC_KEY */
/* Set the Secure Link MAC key */
typedef struct __attribute__((__packed__)) HiSetSlMacKeyCnfBody_s {
        u8       Status;                           /*Key upload status*/
} HiSetSlMacKeyCnfBody_t;

typedef struct __attribute__((__packed__)) HiSetSlMacKeyCnf_s {
        HiMsgHdr_t Header;             
        HiSetSlMacKeyCnfBody_t Body;               
} HiSetSlMacKeyCnf_t;

/* request HI_SL_EXCHANGE_PUB_KEYS */
/* Exchange Secure Link Public Keys */
typedef struct __attribute__((__packed__)) HiSlExchangePubKeysReqBody_s {
        u8       HostPubKey[API_HOST_PUB_KEY_SIZE];   /*Host Public Key*/
        u8       HostPubKeyMac[API_HOST_PUB_KEY_MAC_SIZE];   /*Host Public Key MAC*/
} HiSlExchangePubKeysReqBody_t;

typedef struct __attribute__((__packed__)) HiSlExchangePubKeysReq_s {
        HiMsgHdr_t Header;             
        HiSlExchangePubKeysReqBody_t Body;               
} HiSlExchangePubKeysReq_t;

/* confirmation HI_SL_EXCHANGE_PUB_KEYS */
/* Exchange Secure Link Public Keys */
typedef struct __attribute__((__packed__)) HiSlExchangePubKeysCnfBody_s {
        u8       Status;                           /*Request status*/
        u8       NcpPubKey[API_NCP_PUB_KEY_SIZE];   /*NCP Public Key*/
        u8       NcpPubKeyMac[API_NCP_PUB_KEY_MAC_SIZE];   /*NCP Public Key MAC*/
} HiSlExchangePubKeysCnfBody_t;

typedef struct __attribute__((__packed__)) HiSlExchangePubKeysCnf_s {
        HiMsgHdr_t Header;             
        HiSlExchangePubKeysCnfBody_t Body;               
} HiSlExchangePubKeysCnf_t;

/* request HI_SL_CONFIGURE */
/* Configure Secure Link Layer */
typedef struct __attribute__((__packed__)) HiSlConfigureReqBody_s {
        u8       EncrBmp[API_ENCR_BMP_SIZE];       /*Encryption bitmap*/
        u8       SkeyInvld;                        /*Invalidate Session Key*/
} HiSlConfigureReqBody_t;

typedef struct __attribute__((__packed__)) HiSlConfigureReq_s {
        HiMsgHdr_t Header;             
        HiSlConfigureReqBody_t Body;               
} HiSlConfigureReq_t;

/* confirmation HI_SL_CONFIGURE */
/* Configure Secure Link Layer */
typedef struct __attribute__((__packed__)) HiSlConfigureCnfBody_s {
        u8       NcpEncrBmp[API_NCP_ENCR_BMP_SIZE];   /*NCP Encryption Bitmap*/
} HiSlConfigureCnfBody_t;

typedef struct __attribute__((__packed__)) HiSlConfigureCnf_s {
        HiMsgHdr_t Header;             
        HiSlConfigureCnfBody_t Body;               
} HiSlConfigureCnf_t;

/**************************************************/

#endif /*HI_GENERIC_API*/

/* request WSM_HI_RESET */
/* Reset Wlan link. */
typedef struct __attribute__((__packed__)) WsmHiResetReqBody_s {
        WsmHiResetFlags_t ResetFlags;         
} WsmHiResetReqBody_t;

typedef struct __attribute__((__packed__)) WsmHiResetReq_s {
        HiMsgHdr_t Header;             
        WsmHiResetReqBody_t Body;               
} WsmHiResetReq_t;

/* confirmation WSM_HI_RESET */
/* Reset Wlan link. */
typedef struct __attribute__((__packed__)) WsmHiResetCnfBody_s {
        __le32   Status;                           /*Status to indicate the status of the request.*/
} WsmHiResetCnfBody_t;

typedef struct __attribute__((__packed__)) WsmHiResetCnf_s {
        HiMsgHdr_t Header;             
        WsmHiResetCnfBody_t Body;               
} WsmHiResetCnf_t;

/* request WSM_HI_READ_MIB */
/* Read Configuration Information. */
typedef struct __attribute__((__packed__)) WsmHiReadMibReqBody_s {
        __le16   MibId;                            /*ID of the MIB to be read.*/
        __le16   Reserved;                         /*Reserved*/      
} WsmHiReadMibReqBody_t;

typedef struct __attribute__((__packed__)) WsmHiReadMibReq_s {
        HiMsgHdr_t Header;             
        WsmHiReadMibReqBody_t Body;               
} WsmHiReadMibReq_t;

/* confirmation WSM_HI_READ_MIB */
/* Read Configuration Information. */
typedef struct __attribute__((__packed__)) WsmHiReadMibCnfBody_s {
        __le32   Status;                           /*Status to indicate the status of the request. If WSM_STATUS_SUCCESS is returned, MIB data will follow.*/
        __le16   MibId;                            /*ID of the MIB to be read.*/
        __le16   Length;                           /*Length of the MIB data in bytes.*/
        WsmMibData_t MibData;                      /*The MIB data.*/ 
} WsmHiReadMibCnfBody_t;

typedef struct __attribute__((__packed__)) WsmHiReadMibCnf_s {
        HiMsgHdr_t Header;             
        WsmHiReadMibCnfBody_t Body;               
} WsmHiReadMibCnf_t;

/* request WSM_HI_WRITE_MIB */
/* Read Configuration Information. */
typedef struct __attribute__((__packed__)) WsmHiWriteMibReqBody_s {
        __le16   MibId;                            /*ID of the MIB to be written.*/
        __le16   Length;                           /*Length of the MIB data in bytes.*/
        WsmMibData_t MibData;                      /*The MIB data.*/ 
} WsmHiWriteMibReqBody_t;

typedef struct __attribute__((__packed__)) WsmHiWriteMibReq_s {
        HiMsgHdr_t Header;             
        WsmHiWriteMibReqBody_t Body;               
} WsmHiWriteMibReq_t;

/* confirmation WSM_HI_WRITE_MIB */
/* Read Configuration Information. */
typedef struct __attribute__((__packed__)) WsmHiWriteMibCnfBody_s {
        __le32   Status;                           /*Status to indicate the status of the request.*/
} WsmHiWriteMibCnfBody_t;

typedef struct __attribute__((__packed__)) WsmHiWriteMibCnf_s {
        HiMsgHdr_t Header;             
        WsmHiWriteMibCnfBody_t Body;               
} WsmHiWriteMibCnf_t;

/* request WSM_HI_START_SCAN */
/* Start scanning. */
typedef struct __attribute__((__packed__)) WsmHiStartScanReqBody_s {
        u8       Band;                             /*The radio band. 0 - 2.4 GHz band ; 1 - 5 GHz band*/
        WsmHiScanType_t ScanType;           
        WsmHiScanFlags_t ScanFlags;          
        u8       MaxTransmitRate;                  /*This parameter specifies the transmission rate to be used for sending probe requests.*/
        WsmHiAutoScanParam_t AutoScanParam;      
        u8       NumOfProbeRequests;               /*Number of probe requests (per SSID) sent to one (1) channel.     Zero (0) means that none is send, which means that a passive scan is to be done. Value greater than zero (0) means that an active scan is to be done.*/
        u8       ProbeDelay;                       /*The delay time (in microseconds) period before sending a probe request.*/
        u8       NumOfSSIDs;                       /*Number of SSIDs provided in the scan command (this is zero (0) in broadcast scan). The maximum number of SSIDs that the device can store is two.*/
        u8       NumOfChannels;                    /*Number of channels to be scanned. [Maximum number is 14.]*/
        __le32   MinChannelTime;                   /*time in TUs*/   
        __le32   MaxChannelTime;                   /*time in TUs*/   
        __les32  TxPowerLevel;                     /*in 0.1dBm unit*/
        /* WsmHiSsidDef_t SsidDef[WSM_API_SSID_DEF_SIZE]; */
        /* u8       ChannelList[WSM_API_CHANNEL_LIST_SIZE]; */   /*Optional if the Bit 24 in the Flags field is set.*/
} WsmHiStartScanReqBody_t;

typedef struct __attribute__((__packed__)) WsmHiStartScanReq_s {
        HiMsgHdr_t Header;             
        WsmHiStartScanReqBody_t Body;               
} WsmHiStartScanReq_t;

/* confirmation WSM_HI_START_SCAN */
/* Start scanning. */
typedef struct __attribute__((__packed__)) WsmHiStartScanCnfBody_s {
        __le32   Status;                           /*Status to indicate the status of the request.     If WSM_STATUS_SUCCESS is not returned, the scan process will not start. No scan-completion indication will be sent to the host.*/
} WsmHiStartScanCnfBody_t;

typedef struct __attribute__((__packed__)) WsmHiStartScanCnf_s {
        HiMsgHdr_t Header;             
        WsmHiStartScanCnfBody_t Body;               
} WsmHiStartScanCnf_t;

/* request WSM_HI_STOP_SCAN */
/* Stop scanning */
typedef HiMsgHdr_t WsmHiStopScanReq_t; 

/* confirmation WSM_HI_STOP_SCAN */
/* Stop scanning */
typedef struct __attribute__((__packed__)) WsmHiStopScanCnfBody_s {
        __le32   Status;                           /*Error codes for the stop-scan request.     The stop-scan request acceptance has no impact on whether the scan completion is sent.*/
} WsmHiStopScanCnfBody_t;

typedef struct __attribute__((__packed__)) WsmHiStopScanCnf_s {
        HiMsgHdr_t Header;             
        WsmHiStopScanCnfBody_t Body;               
} WsmHiStopScanCnf_t;

/* indication WSM_HI_SCAN_CMPL */
/* Scan operation complete */
typedef struct __attribute__((__packed__)) WsmHiScanCmplIndBody_s {
        __le32   Status;                           /*Result of the scanning process.*/
        u8       PmMode;                           /*The current 802.11 power management mode of the WLAN device.*/
        u8       NumChannelsCompleted;             /*Number of channels that the scan operation completed.*/
        __le16   Reserved;                         /*Reserved*/      
} WsmHiScanCmplIndBody_t;

typedef struct __attribute__((__packed__)) WsmHiScanCmplInd_s {
        HiMsgHdr_t Header;             
        WsmHiScanCmplIndBody_t Body;               
} WsmHiScanCmplInd_t;

/* request WSM_HI_TX */
/* Transmit a frame */
typedef struct __attribute__((__packed__)) WsmHiTxReqBody_s {
        __le32   PacketId;                         /*Packet identifier that is meant to be used in completion.*/
        u8       MaxTxRate;                        /*Maximum transmit rate.*/
        WsmHiQueueId_t QueueId;            
        u8       More;                             /*True: another packet is pending on the host for transmission.*/
        WsmHiTxFlags_t TxFlags;            
        __le32   Reserved;                         /*Reserved*/      
        __le32   ExpireTime;                       /*The elapsed time in TUs, after the initial transmission of an MSDU, after which further attempts to transmit the MSDU will be terminated.         Overrides the global dot11MaxTransmitMsduLifeTime setting [optional].        The device will set the default value if this is 0.*/
        WsmHiHtTxParameters_t HtTxParameters;     
        __le32   Frame;                            /*An 802.11 frame.*/
} WsmHiTxReqBody_t;

typedef struct __attribute__((__packed__)) WsmHiTxReq_s {
        HiMsgHdr_t Header;             
        WsmHiTxReqBody_t Body;               
} WsmHiTxReq_t;

/* confirmation WSM_HI_TX */
/* Transmit a frame */
typedef struct __attribute__((__packed__)) WsmHiTxCnfBody_s {
        __le32   PacketId;                         /*This field uniquely defines the request that this confirmation message is replied to. It is taken from the corresponding request message.*/
        __le32   Status;                           /*Transmit complete status.*/
        u8       TxedRate;                         /*The data rate at which the frame was successfully transmitted.*/
        u8       AckFailures;                      /*The number of times the frame was transmitted without receiving an acknowledgement.*/
        WsmHiTxResultFlags_t TxResultFlags;      
        __le32   MediaDelay;                       /*The total time in microseconds that the frame spent in the WLAN device before transmission is completed. Value is only valid if status is STATUS_SUCCESS.*/
        __le32   TxQueueDelay;                     /*The total time in microseconds that the frame spent in the WLAN device before transmission was started. Value is only valid if status is STATUS_SUCCESS.*/
} WsmHiTxCnfBody_t;

typedef struct __attribute__((__packed__)) WsmHiTxCnf_s {
        HiMsgHdr_t Header;             
        WsmHiTxCnfBody_t Body;               
} WsmHiTxCnf_t;

/* indication WSM_HI_RX */
/* Received frame indication */
typedef struct __attribute__((__packed__)) WsmHiRxIndBody_s {
        __le32   Status;                           /*Result of the packet receive process.*/
        __le16   ChannelNumber;                    /*Specifies the channel of the received packet.*/
        u8       RxedRate;                         /*The data rate at which the frame was successfully received.*/
        u8       RcpiRssi;                         /*This value is expressed in dBm as signed Q8.0 format for RSSI and unsigned Q7.1 format for RCPI.     The value type of RCPI or RSSI is determined by RssiRcpiMode bit 1. The default is RCPI type.*/
        WsmHiRxFlags_t RxFlags;            
        __le32   Frame;                            /*Result of the packet receive process.*/
        /* u8       Timestamp[WSM_API_TIMESTAMP_SIZE]; */   /*Optional if the Bit 24 in the Flags field is set.*/
} WsmHiRxIndBody_t;

typedef struct __attribute__((__packed__)) WsmHiRxInd_s {
        HiMsgHdr_t Header;             
        WsmHiRxIndBody_t Body;               
} WsmHiRxInd_t;

/* indication WSM_HI_EVENT */
/* Event indication */
typedef struct __attribute__((__packed__)) WsmHiEventIndBody_s {
        __le32   EventId;                          /*Identifies the indication*/
        WsmEventData_t EventData;                  /*Indication parameters. For error indication, this will be a 32-bit WSM status.For RCPI or RSSI indication, this should be an 8-bit RCPI or RSSI value*/
} WsmHiEventIndBody_t;

typedef struct __attribute__((__packed__)) WsmHiEventInd_s {
        HiMsgHdr_t Header;             
        WsmHiEventIndBody_t Body;               
} WsmHiEventInd_t;

/* request WSM_HI_JOIN */
/* Requests to join */
typedef struct __attribute__((__packed__)) WsmHiJoinReqBody_s {
        u8       Mode;                             /*Specifies the operation mode of the station. For the P2P group negotiation, the BSS mode should be used.*/
        u8       Band;                             /*The frequency band. 0 - 2.4GHz, 1 - 5GHz*/
        __le16   ChannelNumber;                    /*Specifies the channel number to join. The channel number will be mapped to an actual frequency according to the band.*/
        u8       BSSID[WSM_API_BSSID_SIZE];        /*Specifies the BSSID of the BSS or IBSS to be joined, or the IBSS to be started.     When joining for the P2P group negotiation, this field should be filled with the MAC address of the peer P2P device.*/
        __le16   AtimWindow;                       /*ATIM window of IBSS. When the ATIM window is zero, the initiated IBSS does not support power saving.*/
        u8       PreambleType;                     /*The frequency band.*/
        u8       ProbeForJoin;                     /*Specifies if a probe request should be send with the specified SSID when joining the network.    This option is to acquire the TSF time of the BSS or IBSS that is to be joined as fast as possible. The TSF time is absorbed from the probe response or from beacon, whichever is received first.*/
        u8       DTIMPeriod;                       /*Reserved*/      
        WsmHiJoinFlags_t JoinFlags;          
        __le32   SSIDLength;                       /*Length of the SSID*/
        u8       SSID[WSM_API_SSID_SIZE];          /*Specifies the SSID of the IBSS to join or start*/
        __le32   BeaconInterval;                   /*Specifies the time between TBTTs in TUs*/
        __le32   BasicRateSet;                     /*A bit mask that defines the BSS basic rate set.*/
} WsmHiJoinReqBody_t;

typedef struct __attribute__((__packed__)) WsmHiJoinReq_s {
        HiMsgHdr_t Header;             
        WsmHiJoinReqBody_t Body;               
} WsmHiJoinReq_t;

/* confirmation WSM_HI_JOIN */
/* Requests to join */
typedef struct __attribute__((__packed__)) WsmHiJoinCnfBody_s {
        __le32   Status;                           /*Error code for the join operation.*/
        __les32  MinPowerLevel;                    /*Minimum transmission power level in units of 0.1 dBm*/
        __les32  MaxPowerLevel;                    /*Maximum transmission power level in units of 0.1 dBm*/
} WsmHiJoinCnfBody_t;

typedef struct __attribute__((__packed__)) WsmHiJoinCnf_s {
        HiMsgHdr_t Header;             
        WsmHiJoinCnfBody_t Body;               
} WsmHiJoinCnf_t;

/* indication WSM_HI_JOIN_COMPLETE */
/* Confirms join completed */
typedef struct __attribute__((__packed__)) WsmHiJoinCompleteIndBody_s {
        __le32   Status;                           /*Error code for the join operation.*/
} WsmHiJoinCompleteIndBody_t;

typedef struct __attribute__((__packed__)) WsmHiJoinCompleteInd_s {
        HiMsgHdr_t Header;             
        WsmHiJoinCompleteIndBody_t Body;               
} WsmHiJoinCompleteInd_t;

/* request WSM_HI_SET_PM_MODE */
/* Sets Pm Mode */
typedef struct __attribute__((__packed__)) WsmHiSetPmModeReqBody_s {
        WsmHiPmMode_t PmMode;             
        u8       FastPsmIdlePeriod;                /*This field, specified in units of 500 us, defines the time that the device determines the link is idle in the fast power-saving mode.             If this parameter is set to 0, a default value is taken by the device. See below for details.*/
        u8       ApPsmChangePeriod;                /*This field, specified in units of 500 us, defines the time that the device determines the AP has stopped its transmit pipeline after a null frame is             received. If this parameter is set to 0, a default value is taken by the device.*/
        u8       MinAutoPsPollPeriod;              /*This field, specified in units of 500 us, defines the minimum time that the device will send a PS-Poll if it guesses that there is a data frame             pending in the AP without receiving a beacon. If this parameter is set to 0, the auto PS-Poll feature is disabled.*/
} WsmHiSetPmModeReqBody_t;

typedef struct __attribute__((__packed__)) WsmHiSetPmModeReq_s {
        HiMsgHdr_t Header;             
        WsmHiSetPmModeReqBody_t Body;               
} WsmHiSetPmModeReq_t;

/* confirmation WSM_HI_SET_PM_MODE */
/* Sets Pm Mode */
typedef struct __attribute__((__packed__)) WsmHiSetPmModeCnfBody_s {
        __le32   Status;                           /*Error code for the set-PM-mode request.     The set-PM-mode completion message will only be sent if the status sent back to the host by the set-PM-mode confirmation message was WSM_STATUS_SUCCESS.*/
} WsmHiSetPmModeCnfBody_t;

typedef struct __attribute__((__packed__)) WsmHiSetPmModeCnf_s {
        HiMsgHdr_t Header;             
        WsmHiSetPmModeCnfBody_t Body;               
} WsmHiSetPmModeCnf_t;

/* indication WSM_HI_SET_PM_MODE_CMPL */
/* Indicates that Set-Ps-Mode has been completed */
typedef struct __attribute__((__packed__)) WsmHiSetPmModeCmplIndBody_s {
        __le32   Status;                           /*Error codes for the set-PM-mode operation*/
        u8       PmMode;                           /*Current WLAN device PM mode state*/
        u8       Reserved[WSM_API_RESERVED_SIZE_3];   /*Reserved*/      
} WsmHiSetPmModeCmplIndBody_t;

typedef struct __attribute__((__packed__)) WsmHiSetPmModeCmplInd_s {
        HiMsgHdr_t Header;             
        WsmHiSetPmModeCmplIndBody_t Body;               
} WsmHiSetPmModeCmplInd_t;

/* request WSM_HI_SET_BSS_PARAMS */
/* Fixes connection parameters */
typedef struct __attribute__((__packed__)) WsmHiSetBssParamsReqBody_s {
        WsmHiBssFlags_t BssFlags;           
        u8       BeaconLostCount;                  /*The number of lost consecutive beacons after which the WLAN device should indicate the BSS-Lost event to the WLAN host driver.             Value of 0 disables the BSS-Lost event indications, thereby also disabling the BSS-gained event indications.*/
        __le16   AID;                              /*Specifies the AID received during the association process.*/
        __le32   OperationalRateSet;               /*The operational rate set mask defined in terms of a bit map corresponding to the rate indices. This will be used for modem enabling purposes.*/
} WsmHiSetBssParamsReqBody_t;

typedef struct __attribute__((__packed__)) WsmHiSetBssParamsReq_s {
        HiMsgHdr_t Header;             
        WsmHiSetBssParamsReqBody_t Body;               
} WsmHiSetBssParamsReq_t;

/* confirmation WSM_HI_SET_BSS_PARAMS */
/* Fixes connection parameters */
typedef struct __attribute__((__packed__)) WsmHiSetBssParamsCnfBody_s {
        __le32   Status;                           /*Error codes for the Set-BssParams request.*/
} WsmHiSetBssParamsCnfBody_t;

typedef struct __attribute__((__packed__)) WsmHiSetBssParamsCnf_s {
        HiMsgHdr_t Header;             
        WsmHiSetBssParamsCnfBody_t Body;               
} WsmHiSetBssParamsCnf_t;

/* request WSM_HI_ADD_KEY */
/* Requests to add a new key */
typedef struct __attribute__((__packed__)) WsmHiAddKeyReqBody_s {
        u8       Type;                             /*Type of the key to be added:*/
        u8       EntryIndex;                       /*Key entry index: 0 to MAX_KEY_ENTRIES-1*/
        __le16   Reserved;                         /*Reserved*/      
        WsmPrivacyKeyData_t Key;                
} WsmHiAddKeyReqBody_t;

typedef struct __attribute__((__packed__)) WsmHiAddKeyReq_s {
        HiMsgHdr_t Header;             
        WsmHiAddKeyReqBody_t Body;               
} WsmHiAddKeyReq_t;

/* confirmation WSM_HI_ADD_KEY */
/* Requests to add a new key */
typedef struct __attribute__((__packed__)) WsmHiAddKeyCnfBody_s {
        __le32   Status;                           /*Error codes for the Add-Key request.*/
} WsmHiAddKeyCnfBody_t;

typedef struct __attribute__((__packed__)) WsmHiAddKeyCnf_s {
        HiMsgHdr_t Header;             
        WsmHiAddKeyCnfBody_t Body;               
} WsmHiAddKeyCnf_t;

/* request WSM_HI_REMOVE_KEY */
/* Requests to remove a key */
typedef struct __attribute__((__packed__)) WsmHiRemoveKeyReqBody_s {
        u8       EntryIndex;                       /*Key entry index: 0 to MAX_KEY_ENTRIES-1*/
        u8       Reserved[WSM_API_RESERVED_SIZE_3];   /*Reserved*/      
} WsmHiRemoveKeyReqBody_t;

typedef struct __attribute__((__packed__)) WsmHiRemoveKeyReq_s {
        HiMsgHdr_t Header;             
        WsmHiRemoveKeyReqBody_t Body;               
} WsmHiRemoveKeyReq_t;

/* confirmation WSM_HI_REMOVE_KEY */
/* Requests to remove a key */
typedef struct __attribute__((__packed__)) WsmHiRemoveKeyCnfBody_s {
        __le32   Status;                           /*Error codes for the Remove-Key request.*/
} WsmHiRemoveKeyCnfBody_t;

typedef struct __attribute__((__packed__)) WsmHiRemoveKeyCnf_s {
        HiMsgHdr_t Header;             
        WsmHiRemoveKeyCnfBody_t Body;               
} WsmHiRemoveKeyCnf_t;

/* request WSM_HI_TX_QUEUE_PARAMS */
/* Requests to set QoS parameters of transmission queues */
typedef struct __attribute__((__packed__)) WsmHiTxQueueParamsReqBody_s {
        u8       QueueId;                          /*Specifies the Access Category Index (ACI) of the queue*/
        u8       Reserved2;                        /*Reserved*/      
        u8       AckPolicy;                        /*ACK frame policy of the specified queue*/
        u8       Reserved1;                        /*Reserved*/      
        __le32   MaxTransmitLifetime;              /*This attribute will be the elapsed time in TUs, after the initial transmission of an MSDU,     after which further attempts to transmit the MSDU will be terminated. This is a standard 802.11 MIB variable. If a value of 0 is specified, the default value is used.*/
        __le16   AllowedMediumTime;                /*Medium time of TSPEC (in 32 us units) allowed per one second averaging period for this queue.*/
        __le16   Reserved3;                        /*Reserved*/      
} WsmHiTxQueueParamsReqBody_t;

typedef struct __attribute__((__packed__)) WsmHiTxQueueParamsReq_s {
        HiMsgHdr_t Header;             
        WsmHiTxQueueParamsReqBody_t Body;               
} WsmHiTxQueueParamsReq_t;

/* confirmation WSM_HI_TX_QUEUE_PARAMS */
/* Requests to set QoS parameters of transmission queues */
typedef struct __attribute__((__packed__)) WsmHiTxQueueParamsCnfBody_s {
        __le32   Status;                           /*Error codes for the Set-TxQueueParams request.*/
} WsmHiTxQueueParamsCnfBody_t;

typedef struct __attribute__((__packed__)) WsmHiTxQueueParamsCnf_s {
        HiMsgHdr_t Header;             
        WsmHiTxQueueParamsCnfBody_t Body;               
} WsmHiTxQueueParamsCnf_t;

/* request WSM_HI_EDCA_PARAMS */
/* Requests to set EDCA access category parameters */
typedef struct __attribute__((__packed__)) WsmHiEdcaParamsReqBody_s {
        __le16   CwMin[WSM_API_CW_MIN_SIZE];       /*CwMin (in slots) for the access class. Indices map to access category priorities as follows :    0 - AC_BK (background), 1 - AC_BE (best effort), 2 - AC_VI (video), 3 - AC_VO (voice)*/
        __le16   CwMax[WSM_API_CW_MAX_SIZE];       /*CwMax (in slots) for the access class.*/
        u8       AIFSN[WSM_API_AIFSN_SIZE];        /*AIFS (in slots) for the access class.*/
        __le16   TxOpLimit[WSM_API_TX_OP_LIMIT_SIZE];   /*TX OP limit (in microseconds) for the access class.*/
        __le32   MaxReceiveLifetime[WSM_API_MAX_RECEIVE_LIFETIME_SIZE];   /*Range of 1 to 0xFFFF FFFF. This is a standard 802.11 MIB variable. If a value of 0 is specified, the default value is used.*/
} WsmHiEdcaParamsReqBody_t;

typedef struct __attribute__((__packed__)) WsmHiEdcaParamsReq_s {
        HiMsgHdr_t Header;             
        WsmHiEdcaParamsReqBody_t Body;               
} WsmHiEdcaParamsReq_t;

/* confirmation WSM_HI_EDCA_PARAMS */
/* Requests to set EDCA access category parameters */
typedef struct __attribute__((__packed__)) WsmHiEdcaParamsCnfBody_s {
        __le32   Status;                           /*Error codes for the Set-EdcaParams request.*/
} WsmHiEdcaParamsCnfBody_t;

typedef struct __attribute__((__packed__)) WsmHiEdcaParamsCnf_s {
        HiMsgHdr_t Header;             
        WsmHiEdcaParamsCnfBody_t Body;               
} WsmHiEdcaParamsCnf_t;

/* request WSM_HI_SWITCH_CHANNEL */
/* Requests that the device changes channel */
typedef struct __attribute__((__packed__)) WsmHiSwitchChannelReqBody_s {
        WsmHiChannelMode_t ChannelMode;        
        u8       ChannelSwitchCount;               /*Number of TBTTs until the channel switch occurs. 0 - At any time. 1 - Immediately before the next TBTT.*/
        __le16   NewChannelNumber;                 /*The new channel number to switch to.*/
        WsmHiSwitchFlags_t SwitchFlags;        
        u8       Band;                             /*The band for the new channel. 0 - 2.4 GHz band, 1 - 5 GHz band*/
        u8       NumTxSlotsReserved;               /*The number of TX slots reserved on the device for frame transmission in the new channel.             At the start of channel switch, excessive TX requests queued for the original channel will be re-queued to the host.*/
        __le32   BasicRateSet;                     /*The basic rate set (in bit mask) for the new channel.*/
        __le16   DurationInKus;                    /*The duration (in Kus) in which the new channel will be switched in.*/
        __le16   ForeignBssDtimPeriodInKus;        /*Foreign BSS DTIM period in Kus. This field is used foreign BSS synchronization.*/
        __le32   ForeignBssTsfDiffLow;             /*The low 32-bit word of TSF difference between the foreign TSF and our TSF.*/
        __le32   ForeignBssTsfDiffHigh;            /*The high 32-bit word of TSF difference between the foreign TSF and our TSF.*/
} WsmHiSwitchChannelReqBody_t;

typedef struct __attribute__((__packed__)) WsmHiSwitchChannelReq_s {
        HiMsgHdr_t Header;             
        WsmHiSwitchChannelReqBody_t Body;               
} WsmHiSwitchChannelReq_t;

/* confirmation WSM_HI_SWITCH_CHANNEL */
/* Requests that the device changes channel */
typedef struct __attribute__((__packed__)) WsmHiSwitchChannelCnfBody_s {
        __le32   Status;                           /*Error codes for the switch-channel request.*/
} WsmHiSwitchChannelCnfBody_t;

typedef struct __attribute__((__packed__)) WsmHiSwitchChannelCnf_s {
        HiMsgHdr_t Header;             
        WsmHiSwitchChannelCnfBody_t Body;               
} WsmHiSwitchChannelCnf_t;

/* indication WSM_HI_SWITCH_CHANNEL_IND */
/* Indicates that the device has changed channel. */
typedef struct __attribute__((__packed__)) WsmHiSwitchChannelIndBody_s {
        __le32   State;                            /*The state code for the switch-channel operation:*/
} WsmHiSwitchChannelIndBody_t;

typedef struct __attribute__((__packed__)) WsmHiSwitchChannelInd_s {
        HiMsgHdr_t Header;             
        WsmHiSwitchChannelIndBody_t Body;               
} WsmHiSwitchChannelInd_t;

/* request WSM_HI_START */
/* Start in AP like mode */
typedef struct __attribute__((__packed__)) WsmHiStartReqBody_s {
        WsmHiMode_t Mode;               
        u8       Band;                             /*The frequency band. 0 - 2.4 GHz band, 1 - 5 GHz band*/
        __le16   ChannelNumber;                    /*Channel number*/
        __le32   CTWindow;                         /*Client traffic window in units of TU.\ Valid only when mode = P2P_GO.\ This value should be less than the beacon interval.*/
        __le32   BeaconInterval;                   /*Interval between two consecutive beacon transmissions in TU.*/
        u8       DTIMPeriod;                       /*DTIM period in terms of beacon intervals.*/
        u8       PreambleType;                     /*Specifies the PLCP preamble type used:*/
        u8       ProbeDelay;                       /*The delay time (in microseconds) period before sending a probe-request.*/
        u8       SsidLength;                       /*Length of the SSID*/
        u8       Ssid[WSM_API_SSID_SIZE];          /*SSID of the BSS or P2P_GO to be started now.*/
        __le32   BasicRateSet;                     /*The basic supported rates for the MiniAP.*/
} WsmHiStartReqBody_t;

typedef struct __attribute__((__packed__)) WsmHiStartReq_s {
        HiMsgHdr_t Header;             
        WsmHiStartReqBody_t Body;               
} WsmHiStartReq_t;

/* confirmation WSM_HI_START */
/* Start in AP like mode */
typedef struct __attribute__((__packed__)) WsmHiStartCnfBody_s {
        __le32   Status;                           /*Status code for the start confirmation*/
} WsmHiStartCnfBody_t;

typedef struct __attribute__((__packed__)) WsmHiStartCnf_s {
        HiMsgHdr_t Header;             
        WsmHiStartCnfBody_t Body;               
} WsmHiStartCnf_t;

/* request WSM_HI_BEACON_TRANSMIT */
/* Start transmitting beacons */
typedef struct __attribute__((__packed__)) WsmHiBeaconTransmitReqBody_s {
        u8       EnableBeaconing;                  /*1 to start beacon transmission, 0 to stop.*/
        u8       Reserved[WSM_API_RESERVED_SIZE_3];   /*Reserved*/      
} WsmHiBeaconTransmitReqBody_t;

typedef struct __attribute__((__packed__)) WsmHiBeaconTransmitReq_s {
        HiMsgHdr_t Header;             
        WsmHiBeaconTransmitReqBody_t Body;               
} WsmHiBeaconTransmitReq_t;

/* confirmation WSM_HI_BEACON_TRANSMIT */
/* Start transmitting beacons */
typedef struct __attribute__((__packed__)) WsmHiBeaconTransmitCnfBody_s {
        __le32   Status;                           /*Status code*/   
} WsmHiBeaconTransmitCnfBody_t;

typedef struct __attribute__((__packed__)) WsmHiBeaconTransmitCnf_s {
        HiMsgHdr_t Header;             
        WsmHiBeaconTransmitCnfBody_t Body;               
} WsmHiBeaconTransmitCnf_t;

/* indication WSM_HI_SUSPEND_RESUME_TX */
/* Send no more Tx requests */
typedef struct __attribute__((__packed__)) WsmHiSuspendResumeTxIndBody_s {
        WsmHiSuspendResumeFlags_t SuspendResumeFlags; 
        __le16   TxResumeFlagsPerIf[WSM_API_TX_RESUME_FLAGS_PER_IF_SIZE];   /*Set to 0*/      
} WsmHiSuspendResumeTxIndBody_t;

typedef struct __attribute__((__packed__)) WsmHiSuspendResumeTxInd_s {
        HiMsgHdr_t Header;             
        WsmHiSuspendResumeTxIndBody_t Body;               
} WsmHiSuspendResumeTxInd_t;

/* request WSM_HI_UPDATE_IE */
/* Update an IE */
typedef struct __attribute__((__packed__)) WsmHiUpdateIeReqBody_s {
        WsmHiIeFlags_t IeFlags;            
        __le16   NumIEs;                           /*Number of information elements present in this request*/
} WsmHiUpdateIeReqBody_t;

typedef struct __attribute__((__packed__)) WsmHiUpdateIeReq_s {
        HiMsgHdr_t Header;             
        WsmHiUpdateIeReqBody_t Body;               
} WsmHiUpdateIeReq_t;

/* confirmation WSM_HI_UPDATE_IE */
/* Update an IE */
typedef struct __attribute__((__packed__)) WsmHiUpdateIeCnfBody_s {
        __le32   Status;                           /*Status of the Update-IE request*/
} WsmHiUpdateIeCnfBody_t;

typedef struct __attribute__((__packed__)) WsmHiUpdateIeCnf_s {
        HiMsgHdr_t Header;             
        WsmHiUpdateIeCnfBody_t Body;               
} WsmHiUpdateIeCnf_t;

/* request WSM_HI_MAP_LINK */
/* Map mac_address to link_id */
typedef struct __attribute__((__packed__)) WsmHiMapLinkReqBody_s {
        u8       MacAddr[WSM_API_MAC_ADDR_SIZE];   /*MAC address of the remote device*/
        WsmHiMapLinkFlags_t MapLinkFlags;       
        u8       PeerStaId;          
} WsmHiMapLinkReqBody_t;

typedef struct __attribute__((__packed__)) WsmHiMapLinkReq_s {
        HiMsgHdr_t Header;             
        WsmHiMapLinkReqBody_t Body;               
} WsmHiMapLinkReq_t;

/* confirmation WSM_HI_MAP_LINK */
/* Map mac_address to link_id */
typedef struct __attribute__((__packed__)) WsmHiMapLinkCnfBody_s {
        __le32   Status;                           /*Status of the Map-Link request*/
} WsmHiMapLinkCnfBody_t;

typedef struct __attribute__((__packed__)) WsmHiMapLinkCnf_s {
        HiMsgHdr_t Header;             
        WsmHiMapLinkCnfBody_t Body;               
} WsmHiMapLinkCnf_t;

/* request WSM_HI_MULTI_TRANSMIT */
/* Returns one or more transmit confirmations  */
typedef HiMsgHdr_t WsmHiMultiTransmitReq_t; 

/* confirmation WSM_HI_MULTI_TRANSMIT */
/* Returns one or more transmit confirmations  */
typedef struct __attribute__((__packed__)) WsmHiMultiTransmitCnfBody_s {
        __le32   NumTxConfs;                       /*Number of transmit confirmation message payload structures contained in this message*/
        __le32   TxConfPayload;                    /*Variable length*/
} WsmHiMultiTransmitCnfBody_t;

typedef struct __attribute__((__packed__)) WsmHiMultiTransmitCnf_s {
        HiMsgHdr_t Header;             
        WsmHiMultiTransmitCnfBody_t Body;               
} WsmHiMultiTransmitCnf_t;

/* indication WSM_HI_DEBUG */
/* Send a debug information */
typedef struct __attribute__((__packed__)) WsmHiDebugIndBody_s {
        __le32   DbgId;                            /*Identifies the indication*/
        WsmHiDebugIndDebugData_t DbgData;               /*Indication parameters. For error indication, this will be a 32-bit status. For RCPI or RSSI indication, this should be an 8-bit RCPI or RSSI value.            For PS-Mode error indication, this will be the error code defined in Event. Variable length.*/
} WsmHiDebugIndBody_t;

typedef struct __attribute__((__packed__)) WsmHiDebugInd_s {
        HiMsgHdr_t Header;             
        WsmHiDebugIndBody_t Body;               
} WsmHiDebugInd_t;

/* indication WSM_HI_BA_TIMEOUT */
/* Send a block ack timeout indication */
typedef struct __attribute__((__packed__)) WsmHiBaTimeoutIndBody_s {
        u8       TID;                
        u8       Reserved;           
        u8       TransmitAddress[WSM_API_TRANSMIT_ADDRESS_SIZE];
} WsmHiBaTimeoutIndBody_t;

typedef struct __attribute__((__packed__)) WsmHiBaTimeoutInd_s {
        HiMsgHdr_t Header;             
        WsmHiBaTimeoutIndBody_t Body;               
} WsmHiBaTimeoutInd_t;

/**************************************************/

#endif  /* _WFX_API_H_ */
